"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _preact = require("preact");

var _iconToggle = require("@material/icon-toggle/");

var _MaterialComponent = _interopRequireDefault(require("../MaterialComponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * @prop disabled = false
 */
class IconToggle extends _MaterialComponent.default {
  constructor() {
    super();
    this.componentName = 'icon-toggle';
    this._onChange = this._onChange.bind(this);
  }

  _onChange(e) {
    if (this.props.onChange) {
      this.props.onChange(e);
    }
  }

  componentDidMount() {
    this.MDComponent = new _iconToggle.MDCIconToggle(this.control);
    this.MDComponent.listen('MDCIconToggle:change', this._onChange);
  }

  componentWillUnmount() {
    this.MDComponent.unlisten('MDCIconToggle:change', this._onChange);
    this.MDComponent.destroy && this.MDComponent.destroy();
  }

  materialDom(props) {
    if (props['data-toggle-on']) props['data-toggle-on'] = JSON.stringify(props['data-toggle-on']);
    if (props['data-toggle-off']) props['data-toggle-off'] = JSON.stringify(props['data-toggle-off']);
    return (0, _preact.h)("i", _extends({}, props, {
      className: "material-icons",
      ref: this.setControlRef
    }), props.children);
  }

}

exports.default = IconToggle;