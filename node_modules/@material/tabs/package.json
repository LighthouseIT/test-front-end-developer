{
  "_args": [
    [
      {
        "raw": "@material/tabs@^0.35.0",
        "scope": "@material",
        "escapedName": "@material%2ftabs",
        "name": "@material/tabs",
        "rawSpec": "^0.35.0",
        "spec": ">=0.35.0 <0.36.0",
        "type": "range"
      },
      "D:\\Dropbox\\Dashboard - Filipe\\node_modules\\material-components-web"
    ]
  ],
  "_from": "@material/tabs@>=0.35.0 <0.36.0",
  "_id": "@material/tabs@0.35.0",
  "_inCache": true,
  "_location": "/@material/tabs",
  "_nodeVersion": "8.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tabs_0.35.0_1524523250317_0.9845971337471744"
  },
  "_npmUser": {
    "name": "bonniez",
    "email": "bonniez@google.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/tabs@^0.35.0",
    "scope": "@material",
    "escapedName": "@material%2ftabs",
    "name": "@material/tabs",
    "rawSpec": "^0.35.0",
    "spec": ">=0.35.0 <0.36.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/tabs/-/tabs-0.35.0.tgz",
  "_shasum": "a7f65d10123f29459f87682d65aeccef360417c9",
  "_shrinkwrap": null,
  "_spec": "@material/tabs@^0.35.0",
  "_where": "D:\\Dropbox\\Dashboard - Filipe\\node_modules\\material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.34.0",
    "@material/base": "^0.35.0",
    "@material/ripple": "^0.35.0",
    "@material/rtl": "^0.35.0",
    "@material/theme": "^0.35.0",
    "@material/typography": "^0.35.0"
  },
  "description": "The Material Components for the web tabs component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-UxoIRgitXxodf60kxLwOh0QCCZZlpX2g3wvHV751u5zcuJEmigYw4ub+BCRnXxgBT074A4CJBshQ56ovFV3NEw==",
    "shasum": "a7f65d10123f29459f87682d65aeccef360417c9",
    "tarball": "https://registry.npmjs.org/@material/tabs/-/tabs-0.35.0.tgz",
    "fileCount": 23,
    "unpackedSize": 263364,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3mD0CRA9TVsSAnZWagAAEukP/2c8M+7hGpTLCE8qiQn1\nH1I1iEUQGWf8MXYCYVR0AlIoit//6z3My8duBEmn7PaU5bMmvU0cNTL7FC6w\nUift1G46jwOS1uvQDG/0zOQR9j079InVsrH2AnpFlyiPtDMdaO5xWWcQHdTx\nWUqyJAZVOm5tkxnE2YErovEtLAu33avo4ikplhiZJIjXW2yI/qeozUU5IWNy\njvQF80OmsgmkSH6UfJU4V/rdjDLuoQzVKH3TMhI+Cz6vuLH79q8GCfDUVIMI\nkegMgh7YFmaQfLbYUKsXElVlzmC6Zp9ReQJyi7ScyHEjdAEmjNUqlTADGESy\nPVbTkGnFYkNNqQe8AqSehmoJRqIjccsX1zNWqrIUfuUqUhiscLI2oAp2aCLf\nlvl9AFvoowHpngJpuTEjQSmLauhgAMDva7X4pE/uHmwPURqRnzkmBzWp9uOA\n5Lv/xEnJnpG40plVlpayXK21dCk3Tfm8Ssg4wP5tgJ22aNScsv1TDqu2+jg4\nGIOyhZfbSwDrIHwonFcgLafSgoqvfFVOPLoit9U1mISY/gUdRh4exMhrpQc6\nHsATwDZ2i1lxcUXkKd0VG+tRs/Q8v2mMyiT9XDpCcUnKhIHJ62igRuibiCRh\nfIbFwLJZlN8KxIGpANTD3ZKyFnUU0fA2ioSuvOUOL2nnhq3Eh/yVLkr1j3p1\nObhV\r\n=JYXW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "tabs"
  ],
  "license": "Apache-2.0",
  "maintainers": [
    {
      "name": "abhiomkar",
      "email": "abhiomkar@gmail.com"
    },
    {
      "name": "acdvorak",
      "email": "acdvorak@gmail.com"
    },
    {
      "name": "aprigogin",
      "email": "andrey.prigogin@gmail.com"
    },
    {
      "name": "azakus",
      "email": "dfreedm2@gmail.com"
    },
    {
      "name": "bonniez",
      "email": "bonniez@google.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "kfranqueiro",
      "email": "kenneth.franqueiro@gmail.com"
    },
    {
      "name": "lynnjepsen",
      "email": "lynnjepsen@google.com"
    },
    {
      "name": "material-admin",
      "email": "lynnjepsen+npm@google.com"
    },
    {
      "name": "moog16",
      "email": "mattgoo@gmail.com"
    },
    {
      "name": "patrickrodee",
      "email": "prodee@google.com"
    },
    {
      "name": "williamernest",
      "email": "williamernest@google.com"
    }
  ],
  "name": "@material/tabs",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "<!--docs:\ntitle: \"Tabs\"\nlayout: detail\nsection: components\nexcerpt: \"A tabbed navigation component.\"\niconId: tabs\npath: /catalog/tabs/\n-->\n\n# MDC Tabs\n\nThe MDC Tabs component contains components which are used to create spec-aligned tabbed navigation components adhering to the\n[Material Design tabs guidelines](https://material.io/guidelines/components/tabs.html). These components are:\n\n- **mdc-tab**: The individual tab elements\n- **mdc-tab-bar**: The main component which is composed of `mdc-tab` elements\n- **mdc-tab-bar-scroller**: The component which controls the horizontal scrolling behavior of an `mdc-tab-bar` that overflows its container\n\n## Design & API Documentation\n\n<ul class=\"icon-list\">\n  <li class=\"icon-list-item icon-list-item--spec\">\n    <a href=\"https://material.io/guidelines/components/tabs.html\">Material Design guidelines: Tabs</a>\n  </li>\n  <li class=\"icon-list-item icon-list-item--link\">\n    <a href=\"http://material-components-web.appspot.com/tabs.html\">Demo</a>\n  </li>\n</ul>\n\n## Installation\n\n```\nnpm install @material/tabs\n```\n\n## Tabs usage\n\n`mdc-tab-bar` can be used as a CSS only component, or a more dynamic JavaScript\ncomponent.\n\nThere are also three different permutations of tab labels. These include text,\nicon-only, and text with icon. An example of each is available on the demo site.\n\n#### Tab Bar with text labels\n```html\n<nav id=\"basic-tab-bar\" class=\"mdc-tab-bar\">\n  <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">Home</a>\n  <a class=\"mdc-tab\" href=\"#two\">Merchandise</a>\n  <a class=\"mdc-tab\" href=\"#three\">About Us</a>\n  <span class=\"mdc-tab-bar__indicator\"></span>\n</nav>\n```\n\n#### Tab Bar with icon labels\n```html\n<nav class=\"mdc-tab-bar mdc-tab-bar--icon-tab-bar\">\n  <a class=\"mdc-tab mdc-tab--active\" href=\"#recents\">\n    <i class=\"material-icons mdc-tab__icon\" aria-label=\"Recents\">phone</i>\n  </a>\n  <a class=\"mdc-tab\" href=\"#favorites\">\n    <i class=\"material-icons mdc-tab__icon\" aria-label=\"Favorites\">favorite</i>\n  </a>\n  <a class=\"mdc-tab\" href=\"#nearby\">\n    <i class=\"material-icons mdc-tab__icon\" aria-label=\"nearby\">person_pin</i>\n  </a>\n  <span class=\"mdc-tab-bar__indicator\"></span>\n</nav>\n```\n\n#### Tab Bar with icon and text labels\n```html\n<nav id=\"icon-text-tab-bar\" class=\"mdc-tab-bar mdc-tab-bar--icons-with-text\">\n  <a class=\"mdc-tab mdc-tab--with-icon-and-text mdc-tab--active\" href=\"#recents\">\n    <i class=\"material-icons mdc-tab__icon\" aria-hidden=\"true\">phone</i>\n    <span class=\"mdc-tab__icon-text\">Recents</span>\n  </a>\n  <a class=\"mdc-tab mdc-tab--with-icon-and-text\" href=\"#favorites\">\n    <i class=\"material-icons mdc-tab__icon\" aria-hidden=\"true\">favorite</i>\n    <span class=\"mdc-tab__icon-text\">Favorites</span>\n  </a>\n  <a class=\"mdc-tab mdc-tab--with-icon-and-text\" href=\"#nearby\">\n    <i class=\"material-icons mdc-tab__icon\" aria-hidden=\"true\">person_pin</i>\n    <span class=\"mdc-tab__icon-text\">Nearby</span>\n  </a>\n  <span class=\"mdc-tab-bar__indicator\"></span>\n</nav>\n```\n\n#### CSS Only Support\n\nIn order for the indicator to appear, you will need to change your mark up if you are using CSS Only. Each `.mdc-tab` will have a child element with the class `.mdc-tab__indicator` as shown below:\n\n```html\n<nav id=\"basic-tab-bar\" class=\"mdc-tab-bar\">\n  <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">\n    Home\n    <span class=\"mdc-tab__indicator\"></span>\n  </a>\n  <a class=\"mdc-tab\" href=\"#two\">\n    Merchandise\n    <span class=\"mdc-tab__indicator\"></span>\n  </a>\n  <a class=\"mdc-tab\" href=\"#three\">\n    About Us\n    <span class=\"mdc-tab__indicator\"></span>\n  </a>\n</nav>\n```\n\n#### RTL Support\n\nTab Bars will reverse the order of their tabs if they are placed within an\nancestor element with attribute `dir=\"rtl\"`.\n\n```html\n<html dir=\"rtl\">\n  <!--...-->\n  <nav id=\"basic-tab-bar\" class=\"mdc-tab-bar\">\n    <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">Home</a>\n    <a class=\"mdc-tab\" href=\"#two\">Merchandise</a>\n    <a class=\"mdc-tab\" href=\"#three\">About Us</a>\n    <span class=\"mdc-tab-bar__indicator\"></span>\n  </nav>\n</html>\n```\n\n\n### Dynamic view switching\n\nWhile facilitating the view switching is left up to the developer, the demo site\nprovides a minimal example of how to do so using JavaScript, also shown below.\n\n#### Markup:\n```html\n<section id=\"dynamic-demo-toolbar\">\n  <nav id=\"dynamic-tab-bar\" class=\"mdc-tab-bar\" role=\"tablist\">\n    <a role=\"tab\" aria-controls=\"panel-1\"\n       class=\"mdc-tab mdc-tab--active\" href=\"#panel-1\">Item One</a>\n    <a role=\"tab\" aria-controls=\"panel-2\"\n       class=\"mdc-tab\" href=\"#panel-2\">Item Two</a>\n    <a role=\"tab\" aria-controls=\"panel-3\"\n       class=\"mdc-tab\" href=\"#panel-3\">Item Three</a>\n    <span class=\"mdc-tab-bar__indicator\"></span>\n  </nav>\n</section>\n<section>\n  <div class=\"panels\">\n    <p class=\"panel active\" id=\"panel-1\" role=\"tabpanel\" aria-hidden=\"false\">Item One</p>\n    <p class=\"panel\" id=\"panel-2\" role=\"tabpanel\" aria-hidden=\"true\">Item Two</p>\n    <p class=\"panel\" id=\"panel-3\" role=\"tabpanel\" aria-hidden=\"true\">Item Three</p>\n  </div>\n  <div class=\"dots\">\n    <a class=\"dot active\" data-trigger=\"panel-1\" href=\"#panel-1\"></a>\n    <a class=\"dot\" data-trigger=\"panel-2\" href=\"#panel-2\"></a>\n    <a class=\"dot\" data-trigger=\"panel-3\" href=\"#panel-3\"></a>\n  </div>\n</section>\n```\n\n#### Script:\n```js\nvar dynamicTabBar = window.dynamicTabBar = new mdc.tabs.MDCTabBar(document.querySelector('#dynamic-tab-bar'));\nvar dots = document.querySelector('.dots');\nvar panels = document.querySelector('.panels');\n\ndynamicTabBar.tabs.forEach(function(tab) {\n  tab.preventDefaultOnClick = true;\n});\n\nfunction updateDot(index) {\n  var activeDot = dots.querySelector('.dot.active');\n  if (activeDot) {\n    activeDot.classList.remove('active');\n  }\n  var newActiveDot = dots.querySelector('.dot:nth-child(' + (index + 1) + ')');\n  if (newActiveDot) {\n    newActiveDot.classList.add('active');\n  }\n}\n\nfunction updatePanel(index) {\n  var activePanel = panels.querySelector('.panel.active');\n  if (activePanel) {\n    activePanel.classList.remove('active');\n  }\n  var newActivePanel = panels.querySelector('.panel:nth-child(' + (index + 1) + ')');\n  if (newActivePanel) {\n    newActivePanel.classList.add('active');\n  }\n}\n\ndynamicTabBar.listen('MDCTabBar:change', function ({detail: tabs}) {\n  var nthChildIndex = tabs.activeTabIndex;\n\n  updatePanel(nthChildIndex);\n  updateDot(nthChildIndex);\n});\n\ndots.addEventListener('click', function (evt) {\n  if (!evt.target.classList.contains('dot')) {\n    return;\n  }\n\n  evt.preventDefault();\n\n  var dotIndex = [].slice.call(dots.querySelectorAll('.dot')).indexOf(evt.target);\n\n  if (dotIndex >= 0) {\n    dynamicTabBar.activeTabIndex = dotIndex;\n  }\n\n  updatePanel(dotIndex);\n  updateDot(dotIndex);\n})\n```\n\n### Sass Mixins\n\nTo customize the ink color of any part of the tab, use the following mixins. We recommend you apply these mixins within CSS selectors like `.foo-tab:not(.mdc-tab--active)` to select your inactive tabs, `foo-tab:hover` to select the hover state of your tabs, and `.foo-tab.mdc-tab--active` to select your active tabs.\n\n#### `mdc-tab-ink-color`\nUse this mixin to set the color of all ink on the tab.\n\n#### `mdc-tab-icon-ink-color`\nThis mixin customizes the icon ink color.\n\n#### `mdc-tab-label-ink-color`\nThis mixin customizes the label ink color.\n\n#### `mdc-tab-bar-indicator-ink-color`\nThis mixin customizes the indicator ink color.\n\n### Using the CSS-Only Component\n\n`mdc-tab-bar` ships with css for styling a tab layout according to the Material\nDesign spec. To use CSS only tab bars, simply use the available class names.\nNote the available `mdc-tab--active` modifier class. This is used to denote the\ncurrently active tab.\n\n```html\n<nav class=\"mdc-tab-bar\">\n  <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">Item One</a>\n  <a class=\"mdc-tab\" href=\"#two\">Item Two</a>\n  <a class=\"mdc-tab\" href=\"#three\">Three</a>\n  <span class=\"mdc-tab-bar__indicator\"></span>\n</nav>\n```\n\n### Using the JavaScript Component\n\n`mdc-tab-bar` ships with a Component/Foundation combo for ingesting instances of `mdc-tab` (a tab).\n`mdc-tab-bar` uses its `initialize()` method call a factory function which gathers and instantiates\nany tab elements that are children of the `mdc-tab-bar` root element.\n\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCTab, MDCTabFoundation} from '@material/tabs';\nimport {MDCTabBar, MDCTabBarFoundation} from '@material/tabs';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcTabs = require('@material/tabs');\nconst MDCTab = mdcTabs.MDCTab;\nconst MDCTabFoundation = mdcTabs.MDCTabFoundation;\n\nconst MDCTabBar = mdcTabs.MDCTabBar;\nconst MDCTabBarFoundation = mdcTabs.MDCTabBarFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/@material/tabs'], mdcTabs => {\n  const MDCTab = mdcTabs.MDCTab;\n  const MDCTabFoundation = mdcTabs.MDCTabFoundation;\n\n  const MDCTabBar = mdcTabs.MDCTabBar;\n  const MDCTabBarFoundation = mdcTabs.MDCTabBarFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCTab = mdc.tabs.MDCTab;\nconst MDCTabFoundation = mdc.tabs.MDCTabFoundation;\n\nconst MDCTabBar = mdc.tabs.MDCTabBar;\nconst MDCTabBarFoundation = mdc.tabs.MDCTabBarFoundation;\n```\n\n#### Automatic Instantiation\n\nIf you do not care about retaining the component instance for the tabs, simply\ncall `attachTo()` and pass it a DOM element.\n\n```javascript\nmdc.tabs.MDCTabBar.attachTo(document.querySelector('#my-mdc-tab-bar'));\n```\n\n#### Manual Instantiation\n\nTabs can easily be initialized using their default constructors as well, similar\nto `attachTo`. This process involves a factory to create an instance of MDCTab\nfrom each tab Element inside of the `mdc-tab-bar` node during the initialization phase\nof `MDCTabBar`, e.g.:\n\n```html\n<nav id=\"my-mdc-tab-bar\" class=\"mdc-tab-bar\">\n  <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">Item One</a>\n  <a class=\"mdc-tab\" href=\"#two\">Item Two</a>\n  <a class=\"mdc-tab\" href=\"#three\">Three</a>\n  <span class=\"mdc-tab-bar__indicator\"></span>\n</nav>\n```\n\n```javascript\nimport {MDCTabBar, MDCTabBarFoundation} from '@material/tabs';\n\nconst tabBar = new MDCTabBar(document.querySelector('#my-mdc-tab-bar'));\n```\n\n\n### Using the JavaScript Tab Bar Scroller Component\n\n`mdc-tab-bar-scroller` ships with a Component/Foundation combo which wraps instances of `mdc-tab-bar`. `mdc-tab-bar-scroller` uses its `initialize()` method call a factory function which gathers and instantiates any tab bar elements that are children of the `mdc-tab-bar-scroller` root element.\n\nThe anatomy of `mdc-tab-bar-scroller` includes an instance of `mdc-tab-bar`, RTL-aware forward and back indicators which, when actioned on, move the tab bar left and right, and a scroll frame. The scroll frame is the parent element of the tab bar, and serves to mask the tabs in the tab bar when they overflow the available width.\n\n\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCTab, MDCTabFoundation} from '@material/tabs';\nimport {MDCTabBar, MDCTabBarFoundation} from '@material/tabs';\nimport {MDCTabBarScroller, MDCTabBarFoundationScroller} from '@material/tabs';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcTabs = require('@material/tabs');\nconst MDCTab = mdcTabs.MDCTab;\nconst MDCTabFoundation = mdcTabs.MDCTabFoundation;\n\nconst MDCTabBar = mdcTabs.MDCTabBar;\nconst MDCTabBarFoundation = mdcTabs.MDCTabBarFoundation;\n\nconst MDCTabBarScroller = mdcTabs.MDCTabBarScroller;\nconst MDCTabBarScrollerFoundation = mdcTabs.MDCTabBarScrollerFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/@material/tabs'], mdcTabs => {\n  const MDCTab = mdcTabs.MDCTab;\n  const MDCTabFoundation = mdcTabs.MDCTabFoundation;\n\n  const MDCTabBar = mdcTabs.MDCTabBar;\n  const MDCTabBarFoundation = mdcTabs.MDCTabBarFoundation;\n\n  const MDCTabBarScroller = mdcTabs.MDCTabBarScroller;\n  const MDCTabBarScrollerFoundation = mdcTabs.MDCTabBarScrollerFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCTab = mdc.tabs.MDCTab;\nconst MDCTabFoundation = mdc.tabs.MDCTabFoundation;\n\nconst MDCTabBar = mdc.tabs.MDCTabBar;\nconst MDCTabBarFoundation = mdc.tabs.MDCTabBarFoundation;\n\nconst MDCTabBarScroller = mdc.tabs.MDCTabBarScroller;\nconst MDCTabBarScrollerFoundation = mdc.tabs.MDCTabBarScrollerFoundation;\n```\n\n#### Automatic Instantiation\n\nIf you do not care about retaining the component instance for the tabs, simply\ncall `attachTo()` and pass it a DOM element.\n\n```javascript\nmdc.tabs.MDCTabBarScroller.attachTo(document.querySelector('#my-mdc-tab-bar-scroller'));\n```\n\n#### Manual Instantiation\n\nTab Bar Scrollers can easily be initialized using their default constructors as well, similar\nto `attachTo`. This process involves a factory to create an instance of `MDCTabBar`\nfrom the `mdc-tab-bar` Element inside of the `mdc-tab-bar-scroller` node during the initialization phase\nof `MDCTabBarScroller`, e.g.:\n\n```html\n<div id=\"my-mdc-tab-bar-scroller\" class=\"mdc-tab-bar-scroller\">\n  <div class=\"mdc-tab-bar-scroller__indicator mdc-tab-bar-scroller__indicator--back\">\n    <a class=\"mdc-tab-bar-scroller__indicator__inner material-icons\" href=\"#\" aria-label=\"scroll back button\">\n      navigate_before\n    </a>\n  </div>\n  <div class=\"mdc-tab-bar-scroller__scroll-frame\">\n    <nav id=\"my-scrollable-tab-bar\" class=\"mdc-tab-bar mdc-tab-bar-scroller__scroll-frame__tabs\">\n      <a class=\"mdc-tab mdc-tab--active\" href=\"#one\">Item One</a>\n      <a class=\"mdc-tab\" href=\"#two\">Item Two</a>\n      <a class=\"mdc-tab\" href=\"#three\">Item Three</a>\n      <a class=\"mdc-tab\" href=\"#four\">Item Four</a>\n      <a class=\"mdc-tab\" href=\"#five\">Item Five</a>\n      <a class=\"mdc-tab\" href=\"#six\">Item Six</a>\n      <a class=\"mdc-tab\" href=\"#seven\">Item Seven</a>\n      <a class=\"mdc-tab\" href=\"#eight\">Item Eight</a>\n      <a class=\"mdc-tab\" href=\"#nine\">Item Nine</a>\n      <span class=\"mdc-tab-bar__indicator\"></span>\n    </nav>\n  </div>\n  <div class=\"mdc-tab-bar-scroller__indicator mdc-tab-bar-scroller__indicator--forward\">\n    <a class=\"mdc-tab-bar-scroller__indicator__inner material-icons\" href=\"#\" aria-label=\"scroll forward button\">\n      navigate_next\n    </a>\n  </div>\n</div>\n```\n\n```javascript\nimport {MDCTabBarScroller, MDCTabBarScrollerFoundation} from '@material/tabs';\n\nconst tabBarScroller = new MDCTabBarScroller(document.querySelector('#my-mdc-tab-bar-scroller'));\n```\n\nTab Bar Scrollers can also instantiate any `mdc-tab-bar` from a DOM element on the fly using a built in factory function:\n\n```js\nimport {MDCTabBarScroller, MDCTabBarScrollerFoundation} from '@material/tabs';\n\nconst tabBarEl = document.querySelector('#my-mdc-tab-bar');\nconst scrollerEl = document.querySelector('#my-mdc-tab-bar-scroller');\n\nconst tabBarScroller = new MDCTabBarScroller(scrollerEl, undefined, tabBarEl);\n```\nThis will create an instance of MDC Tab Bar during the initialization phase of Tab Bar Scroller.\n\n\n## Tab\n\n### Tab component API\n\n#### Properties\n\n| Property Name | Type | Description |\n| --- | --- | --- |\n| `computedWidth` | `number` | _(read-only)_ The width of the tab. |\n| `computedLeft` | `number` | _(read-only)_ The left offset of the tab. |\n| `isActive` | `boolean` | Whether or not the tab is active. Setting this makes the tab active. |\n| `preventDefaultOnClick` | `boolean` | Whether or not the tab will call `preventDefault()` on an event. Setting this makes the tab call `preventDefault()` on events. |\n\n### Tab Events\n\n#### MDCTab:selected\n\nBroadcast when a user actions on the tab.\n\n\n### Using the Foundation Class\n\nMDC Tab ships with an `MDCTabFoundation` class that external frameworks and libraries can\nuse to integrate the component. As with all foundation classes, an adapter object must be provided.\n\n\n### Adapter API\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `registerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the root element, for the specified event name. |\n| `deregisterInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from the root element, for the specified event name. |\n| `getOffsetWidth() => number` | Return the width of the tab |\n| `getOffsetLeft() => number` | Return distance between left edge of tab and left edge of its parent element |\n| `notifySelected() => {}` | Broadcasts an event denoting that the user has actioned on the tab |\n\n\n### The full foundation API\n\n#### MDCTabFoundation.getComputedWidth() => number\n\nReturn the computed width for tab.\n\n#### MDCTabFoundation.getComputedLeft() => number\n\nReturn the computed left offset for tab.\n\n#### MDCTabFoundation.isActive() => boolean\n\nReturn true if tab is active.\n\n#### MDCTabFoundation.setActive(isActive = false) => void\n\nSet tab to active. If `isActive` is true, adds the active modifier class, otherwise removes it.\n\n#### MDCTabFoundation.preventsDefaultOnClick() => boolean\n\nReturn true if the tab prevents the default click action\n\n#### MDCTabFoundation.setPreventDefaultOnClick(preventDefaultOnClick = false) => void\n\nSets tabs `preventDefaultOnClick` property to the value of the `preventDefaultOnClick` argument passed.\n\n#### MDCTabFoundation.measureSelf() => void\n\nSets `computedWidth_` and `computedLeft_` for a tab.\n\n\n## Tab Bar\n\n### Tab Bar component API\n\n#### Properties\n\n| Property Name | Type | Description |\n| --- | --- | --- |\n| `tabs` | `MDCTab[]` | _(read-only)_ An array of the tab bar's instances of MDC Tab. |\n| `activeTab` | `MDCTab` | The currently active tab. Setting this makes the tab active. |\n| `activeTabIndex` | `number` | The index of the currently active tab. Setting this makes the tab at the given index active. |\n\n#### MDCTabBar.layout() => void\n\nProxies to the foundation's `layout()` method.\n\n### Tab Bar Events\n\n#### MDCTabBar:change\n\nBroadcast when a user actions on a tab, resulting in a change in the selected tab.\n\n\n### Using the Foundation Class\n\n`mdc-tab-bar` ships with an `MDCTabBarFoundation` class that external frameworks\nand libraries can use to integrate the component. As with all foundation\nclasses, an adapter object must be provided.\n\n\n### Adapter API\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `bindOnMDCTabSelectedEvent() => void` | Adds `MDCTab:selected` event listener to root |\n| `unbindOnMDCTabSelectedEvent() => void` | Removes `MDCTab:selected` event listener from root |\n| `registerResizeHandler(handler: EventListener) => void` | Adds an event listener to the root element, for a resize event. |\n| `deregisterResizeHandler(handler: EventListener) => void` | Removes an event listener from the root element, for a resize event. |\n| `getOffsetWidth() => number` | Returns width of root element. |\n| `setStyleForIndicator(propertyName: string, value: string) => void` | Sets style property for indicator. |\n| `getOffsetWidthForIndicator() => number` | Returns width of indicator. |\n| `notifyChange(evtData: Object) => void` | Emits `MDCTabBar:change` event, passes evtData. |\n| `getNumberOfTabs() => number` | Returns number of tabs in MDC Tabs instance. |\n| `getActiveTab() => MDCTab` | Returns the instance of MDCTab that is currently active. |\n| `isTabActiveAtIndex(index: number) => boolean` | Returns true if tab at index is active. |\n| `setTabActiveAtIndex(index: number) => void` | Sets tab active at given index. |\n| `isDefaultPreventedOnClickForTabAtIndex(index: number) => boolean` | Returns true if tab does not prevent default click action. |\n| `setPreventDefaultOnClickForTabAtIndex(index: number, preventDefaultOnClick: boolean)` | Sets preventDefaultOnClick for tab at given index |\n| `measureTabAtIndex(index: number) => void` | sets measurements (width, left offset) for tab at given index. |\n| `getComputedWidthForTabAtIndex(index: number) => number` | Returns width of tab at given index. |\n| `getComputedLeftForTabAtIndex(index: number) => number` | Returns left offset of tab at given index. |\n\n\n### The full foundation API\n\n#### MDCTabBarFoundation.layout() => void\n\nSets layout for the Tab Bar component.\n\n#### MDCTabBarFoundation.getActiveTabIndex() => number\n\nReturns index of currently active tab\n\n#### MDCTabBarFoundation.getComputedWidth() => number\n\nReturns the width of the element containing the tabs.\n\n#### MDCTabBarFoundation.switchToTabAtIndex(index, shouldNotify) => void\n\nUpdates the active tab to be the tab at the given index, emits `MDCTabBar:change` if `shouldNotify` is true.\n\n#### MDCTabBarFoundation.getActiveTabIndex() => number\n\nReturns the index of the currently active tab.\n\n\n## Tab Bar Scroller\n\n### Tab Bar Scroller component API\n\n#### Properties\n\n| Property Name | Type | Description |\n| --- | --- | --- |\n| `tabBar` | `MDCTabBar` | _(read-only)_ The scroller's tab bar. |\n\n#### MDCTabBarScroller.layout() => void\n\nProxies to the foundation's `layout()` method.\n\n### Using the Foundation Class\n\nMDC Tab Bar Scroller ships with an `MDCTabBarScrollerFoundation` class that external frameworks and libraries can use to integrate the component. As with all foundation classes, an adapter object must be provided.\n\n\n### Adapter API\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `eventTargetHasClass(target: HTMLElement, className: string) => boolean` | Returns true if target has a given class name |\n| `addClassToForwardIndicator(className: string) => void` | Adds a given class to the forward indicator |\n| `removeClassFromForwardIndicator(className: string) => void` | Removes a given class from the forward indicator |\n| `addClassToBackIndicator(className: string) => void` | Adds a given class to the back indicator |\n| `removeClassFromBackIndicator(className: string) => void` | Removes a given class from the back indicator |\n| `isRTL() => boolean` | Returns true if in RTL context. False otherwise. |\n| `registerBackIndicatorClickHandler(handler: EventListener) => void` | Registers an event handler to be called when a `click` event happens on the back indicator |\n| `deregisterBackIndicatorClickHandler(handler: EventHandler) => void` | Deregisters an event handler from a `click` event happening on the back indicator |\n| `registerForwardIndicatorClickHandler(handler: EventHandler) => void` | Registers an event handler to be called when a `click` event happens on the forward indicator |\n| `deregisterForwardIndicatorClickHandler(handler: EventHandler) => void` | Deregisters an event handler from a `click` event happening on the forward indicator. |\n| `registerCapturedInteractionHandler(evt: string, handler: EventHandler) => void` | Registers an event handler to be called when a `focus`, `touchstart`, or `mousedown` event happens on the root of the component. These events gets dispatched to the listener during the capture phase. They also govern the scrolling behavior when tabs are tabbed to or actioned on. |\n| `deregisterCapturedInteractionHandler(evt: string, handler: EventHandler) => void` | Deregisters an event handler from a `focus`, `touchstart`, or `mousedown` events happening on the root of the component |\n| `registerWindowResizeHandler(handler: EventHandler) => void` | Registers an event handler to be called when a `resize` event happens on the `window` |\n| `deregisterWindowResizeHandler(handler: EventHandler) => void `| Deregisters an event handler from a `resize` event happening on the `window` |\n| `getNumberOfTabs() => number` | Returns the number of tabs in the scroller's tab bar |\n| `getComputedWidthForTabAtIndex(index: number) => number` | Returns the width of a tab at the given index |\n| `getComputedLeftForTabAtIndex(index: number) => number` | Returns the left offset of a tab at the given index |\n| `getOffsetWidthForScrollFrame() => number` | Returns the width of the scroll frame. This is the width of the visible tabs. |\n| `getScrollLeftForScrollFrame() => number` | Returns the `scrollLeft` value of the scroll frame |\n| `setScrollLeftForScrollFrame(scrollLeftAmount: number) => void` | Sets the value of `scrollLeft` for the scroll frame. |\n| `getOffsetWidthForTabBar() => number` | Returns the width of the _entire_ tab bar, including that which is occluded. |\n| `setTransformStyleForTabBar(value: string) => void` | Sets the `translateX` `transform` property for the tab bar. |\n| `getOffsetLeftForEventTarget(target: HTMLElement) => number`| Returns the left offset of a given element. |\n| `getOffsetWidthForEventTarget(target: HTMLElement) => number` | Returns the width of a given element. |\n\n\n### The full foundation API\n\n#### MDCTabBarScrollerFoundation.scrollBack() => void\n\nScrolls the tab bar such that the leftmost tab traverses the scroll frame and becomes the rightmost tab, potentially being partially, but not fully, occluded.\n\n#### MDCTabBarScrollerFoundation.scrollForward() => void\n\nScrolls the tab bar such that the rightmost tab traverses the scroll frame and becomes the leftmost tab. This tabs left offset will line up with the left edge of the scroll frame, and never be partially or fully occluded.\n\n> **NOTE:** Due to a quirk in event behavior, we allow the rightmost tab to be partially occluded even when tabbed to because clicking on such an element would shift the frame on the `focus` event. This would result in a scenario where the ripple persists and the intended tab would not be selected due to the tab bar shifting before the `mouseup` or `click` events get dispatched.\n\n#### MDCTabBarScrollerFoundation.scrollToTabAtIndex(index: number) => void\n\nScrolls the tab bar such that the tab at the index provided traverses the scroll frame and becomes the leftmost tab.\n\n#### MDCTabBarScrollerFoundation.layout() => void\n\nIf the tab bar is overflowing its available width, this method will reset the back and forward indicators to the correct states (visible/hidden) based on the new width.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "version": "0.35.0"
}
