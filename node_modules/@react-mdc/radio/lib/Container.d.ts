/// <reference types="react" />
import * as React from "react";
import { Set } from "immutable";
import * as PropTypes from "prop-types";
import { ClassNameMetaBase, DefaultComponentBase } from "@react-mdc/base";
import { FoundationAdapter } from "./adapter";
export declare const CLASS_NAME = "mdc-radio";
export declare type ChildProps = {
    className?: string;
};
export declare type MetaProps = {
    checked?: boolean;
    disabled?: boolean;
    className?: string;
};
export declare type State = {
    foundationClasses: Set<string>;
};
export declare type ChildContext = {
    adapter: FoundationAdapter<ChildProps>;
};
/**
 * Radio input container component
 */
export declare class Meta extends ClassNameMetaBase<ChildProps, MetaProps, State> {
    static childContextTypes: {
        adapter: PropTypes.Requireable<any>;
    };
    state: State;
    private adapter;
    private foundation;
    constructor(props: any);
    getChildContext(): ChildContext;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(props: any): void;
    protected renderBaseClassName(): string;
    protected renderClassValues(): any;
    private syncFoundation(props);
    private handleChange;
}
export default class Container extends DefaultComponentBase<React.HTMLProps<HTMLDivElement>, MetaProps, {}> {
    static Meta: typeof Meta;
    protected getMetaComponent(): typeof Meta;
    protected getMetaPropNames(): string[];
    protected getChildComponent(): string;
}
