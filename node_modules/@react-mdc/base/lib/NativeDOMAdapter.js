"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var forEach = require("lodash.foreach");
var React = require("react");
var ReactDOM = require("react-dom");
var event_1 = require("./event");
/**
 * High order components that adds native DOM properties
 * that can't be controlled by React.
 */
var NativeDOMAdapter = (function (_super) {
    __extends(NativeDOMAdapter, _super);
    function NativeDOMAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleRef = function (ref) {
            var props = _this.internalProps(_this.props);
            var prevNode = _this.lastDOMNode;
            var nextNode = null;
            if (ref != null) {
                nextNode = ReactDOM.findDOMNode(ref);
            }
            _this.updateNode(prevNode, nextNode, props, props);
            _this.lastDOMNode = nextNode;
        };
        return _this;
    }
    NativeDOMAdapter.prototype.render = function () {
        var child = this.props.children;
        var reactConvertibles = this.filterReactEventConvertibles(this.props.eventListeners || {});
        var merged = this.mergeEvents(reactConvertibles, child.props);
        return React.cloneElement(child, __assign({ ref: this.handleRef }, merged));
    };
    NativeDOMAdapter.prototype.componentDidUpdate = function (origPrevProps) {
        var props = this.internalProps(this.props);
        var prevProps = this.internalProps(origPrevProps);
        this.updateNode(this.lastDOMNode, this.lastDOMNode, prevProps, props);
    };
    NativeDOMAdapter.prototype.internalProps = function (props) {
        return {
            cssVariables: props.cssVariables,
            eventListeners: props.eventListeners,
            attributes: props.attributes,
            children: props.children,
        };
    };
    NativeDOMAdapter.prototype.mergeEvents = function (eventListeners, props) {
        var merged = __assign({}, props);
        forEach(eventListeners, function (listeners, eventType) {
            var eventProp = event_1.EVENT_MAP[eventType];
            if (eventProp == null) {
                return;
            }
            var givenEvent;
            if (eventProp in merged) {
                givenEvent = merged[eventProp];
            }
            else {
                givenEvent = function () { };
            }
            var listener = function (event) {
                var nativeEvent = event.nativeEvent;
                var proxiedEvent = {};
                for (var key in nativeEvent) {
                    if (key.slice(0, 1) !== "_") {
                        proxiedEvent[key] = nativeEvent[key];
                    }
                }
                proxiedEvent.stopPropagation = function () {
                    event.stopPropagation();
                    nativeEvent.stopPropagation();
                };
                givenEvent(event);
                if (event.defaultPrevented) {
                    return;
                }
                listeners.every(function (nativeListener) {
                    nativeListener(proxiedEvent);
                    return !nativeEvent.defaultPrevented;
                });
            };
            merged[eventProp] = listener;
        });
        return merged;
    };
    // Manage CSS variables
    NativeDOMAdapter.prototype.removeCssVariables = function (dom, toRemove) {
        forEach(toRemove, function (value, key) {
            if (dom.style.getPropertyValue(key) === value) {
                dom.style.removeProperty(key);
            }
        });
    };
    NativeDOMAdapter.prototype.addCssVariables = function (dom, toAdd) {
        forEach(toAdd, function (value, key) {
            if (dom.style.getPropertyValue(key) !== value) {
                dom.style.setProperty(key, value);
            }
        });
    };
    NativeDOMAdapter.prototype.updateCssVariables = function (dom, prev, next) {
        var toRemove = {};
        var toAdd = {};
        forEach(prev, function (value, key) {
            if (next[key] !== value) {
                toRemove[key] = value;
            }
        });
        forEach(next, function (value, key) {
            if (prev[key] !== value) {
                toAdd[key] = value;
            }
        });
        this.removeCssVariables(dom, toRemove);
        this.addCssVariables(dom, toAdd);
    };
    // Manage event listeners
    NativeDOMAdapter.prototype.filterReactEventConvertibles = function (eventListeners) {
        var nativeListeners = {};
        forEach(eventListeners, function (listeners, eventType) {
            if (eventType in event_1.EVENT_MAP) {
                nativeListeners[eventType] = listeners;
            }
        });
        return nativeListeners;
    };
    NativeDOMAdapter.prototype.filterNativeEvents = function (eventListeners) {
        var nativeListeners = {};
        forEach(eventListeners, function (listeners, eventType) {
            if (!(eventType in event_1.EVENT_MAP)) {
                nativeListeners[eventType] = listeners;
            }
        });
        return nativeListeners;
    };
    NativeDOMAdapter.prototype.removeEventListeners = function (dom, toRemove) {
        forEach(this.filterNativeEvents(toRemove), function (listeners, event) {
            listeners.forEach(function (listener) {
                dom.removeEventListener(event, listener);
            });
        });
    };
    NativeDOMAdapter.prototype.addEventListeners = function (dom, toAdd) {
        forEach(this.filterNativeEvents(toAdd), function (listeners, event) {
            listeners.forEach(function (listener) {
                dom.addEventListener(event, listener);
            });
        });
    };
    NativeDOMAdapter.prototype.updateEventListeners = function (dom, prev, next) {
        var prevKeys = Object.keys(prev);
        var nextKeys = Object.keys(next);
        var allKeys = immutable_1.OrderedSet
            .of.apply(immutable_1.OrderedSet, nextKeys.concat(prevKeys)).toJS();
        var diff = allKeys.map(function (event) {
            var prevListeners = prev[event] || [];
            var nextListeners = next[event] || [];
            var diffStart;
            for (diffStart = 0; diffStart < Math.min(prevListeners.length, nextListeners.length); diffStart++) {
                if (prevListeners[diffStart] !== nextListeners[diffStart]) {
                    break;
                }
            }
            return {
                event: event,
                toRemove: prevListeners.slice(diffStart),
                toAdd: nextListeners.slice(diffStart),
            };
        });
        var toAdd = diff.reduce(function (listeners, item) {
            return (__assign({}, listeners, (_a = {}, _a[item.event] = item.toAdd, _a)));
            var _a;
        }, {});
        var toRemove = diff.reduce(function (listeners, item) {
            return (__assign({}, listeners, (_a = {}, _a[item.event] = item.toRemove, _a)));
            var _a;
        }, {});
        this.removeEventListeners(dom, toRemove);
        this.addEventListeners(dom, toAdd);
    };
    // Manage attributes
    NativeDOMAdapter.prototype.removeAttributes = function (dom, toRemove) {
        forEach(toRemove, function (value, key) {
            if (dom.getAttribute(key) === value) {
                dom.removeAttribute(key);
            }
        });
    };
    NativeDOMAdapter.prototype.addAttributes = function (dom, toAdd) {
        forEach(toAdd, function (value, key) {
            if (dom.getAttribute(key) !== value) {
                dom.setAttribute(key, value);
            }
        });
    };
    NativeDOMAdapter.prototype.updateAttributes = function (dom, prev, next) {
        var toRemove = {};
        var toAdd = {};
        forEach(prev, function (value, key) {
            if (next[key] !== value) {
                toRemove[key] = value;
            }
        });
        forEach(next, function (value, key) {
            if (prev[key] !== value) {
                toAdd[key] = value;
            }
        });
        this.removeAttributes(dom, toRemove);
        this.addAttributes(dom, toAdd);
    };
    NativeDOMAdapter.prototype.updateNode = function (prevNode, nextNode, prevProps, props) {
        if (prevNode === nextNode) {
            if (nextNode != null) {
                // Update
                this.updateCssVariables(nextNode, prevProps.cssVariables, props.cssVariables);
                this.updateEventListeners(nextNode, prevProps.eventListeners, props.eventListeners);
                this.updateAttributes(nextNode, prevProps.attributes, props.attributes);
            }
        }
        else {
            if (prevNode != null) {
                // Remove from previous DOM node
                this.removeCssVariables(prevNode, props.cssVariables);
                this.removeEventListeners(prevNode, props.eventListeners);
                this.removeAttributes(prevNode, props.attributes);
            }
            if (nextNode != null) {
                // Add to new DOM node
                this.addCssVariables(nextNode, props.cssVariables);
                this.addEventListeners(nextNode, props.eventListeners);
                this.addAttributes(nextNode, props.attributes);
            }
        }
    };
    NativeDOMAdapter.defaultProps = {
        cssVariables: {},
        eventListeners: {},
        attributes: {},
    };
    return NativeDOMAdapter;
}(React.Component));
exports.default = NativeDOMAdapter;
//# sourceMappingURL=NativeDOMAdapter.js.map