/// <reference types="react" />
import * as React from "react";
export declare type EventListeners = {
    [eventType: string]: EventListener[];
};
export declare type CSSVariables = {
    [name: string]: string;
};
export declare type Attributes = {
    [name: string]: string;
};
export declare type Props = {
    cssVariables?: CSSVariables;
    eventListeners?: EventListeners;
    attributes?: Attributes;
    children: React.ReactElement<any>;
};
/**
 * High order components that adds native DOM properties
 * that can't be controlled by React.
 */
export default class NativeDOMAdapter extends React.Component<Props, {}> {
    static defaultProps: {
        cssVariables: {};
        eventListeners: {};
        attributes: {};
    };
    props: Props;
    private lastDOMNode;
    render(): React.ReactElement<any>;
    componentDidUpdate(origPrevProps: Props): void;
    private internalProps(props);
    private mergeEvents(eventListeners, props);
    private removeCssVariables(dom, toRemove);
    private addCssVariables(dom, toAdd);
    private updateCssVariables(dom, prev, next);
    private filterReactEventConvertibles(eventListeners);
    private filterNativeEvents(eventListeners);
    private removeEventListeners(dom, toRemove);
    private addEventListeners(dom, toAdd);
    private updateEventListeners(dom, prev, next);
    private removeAttributes(dom, toRemove);
    private addAttributes(dom, toAdd);
    private updateAttributes(dom, prev, next);
    private updateNode(prevNode, nextNode, prevProps, props);
    private handleRef;
}
