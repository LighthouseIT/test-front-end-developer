"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("@react-mdc/base");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
exports.propertyClassNames = {
    ADJUST_MARGIN: constants_1.BASE_CLASS_NAME + "--adjust-margin",
};
/**
 * Text meta component decorated by mdc-typography
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Meta.prototype.renderBaseClassName = function () {
        return utils_1.classNameForTextStyle(this.props.textStyle);
    };
    Meta.prototype.renderClassValues = function () {
        return [(_a = {},
                _a[exports.propertyClassNames.ADJUST_MARGIN] = this.props.adjustMargin,
                _a)];
        var _a;
    };
    Meta.defaultProps = {
        adjustMargin: false,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var Text = (function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Text.defaultComponent = function (style) {
        switch (style) {
            case "display4":
                return "h1";
            case "display3":
                return "h2";
            case "display2":
                return "h3";
            case "display1":
                return "h4";
            case "headline":
                return "h5";
            case "title":
                return "h6";
            case "subheading2":
            case "subheading1":
                return "div";
            case "body2":
            case "body1":
            case "caption":
                return "p";
            default:
                throw new TypeError("Invalid text style: " + style);
        }
    };
    Text.prototype.getMetaComponent = function () {
        return Meta;
    };
    Text.prototype.getMetaPropNames = function () {
        return [
            "textStyle",
            "adjustMargin",
        ];
    };
    Text.prototype.getChildComponent = function () {
        return Text.defaultComponent(this.props.textStyle);
    };
    Text.Meta = Meta;
    return Text;
}(base_1.DefaultComponentBase));
exports.default = Text;
//# sourceMappingURL=Text.js.map