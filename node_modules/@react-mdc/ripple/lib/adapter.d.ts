/**
 * Foundation adapters.
 */
/**
 * Ripple adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class RippleAdapter {
    browserSupportsCssVars(): boolean;
    isUnbounded(): boolean;
    isSurfaceActive(): boolean;
    addClass(_className: string): void;
    removeClass(_className: string): void;
    registerInteractionHandler(_evtType: string, _handler: EventListener): void;
    deregisterInteractionHandler(_evtType: string, _handler: EventListener): void;
    registerResizeHandler(_handler: EventListener): void;
    deregisterResizeHandler(_handler: EventListener): void;
    updateCssVariable(_varName: string, _value: string | null): void;
    computeBoundingRect(): ClientRect | null;
    getWindowPageOffset(): {
        x: number;
        y: number;
    };
}
/**
 * Composite adapter for MDCRippleFoundation
 */
export declare class FoundationAdapter {
    rippleAdapter: RippleAdapter;
    constructor();
    setRippleAdapter(rippleAdapter: RippleAdapter): void;
    browserSupportsCssVars(): boolean;
    isUnbounded(): boolean;
    isSurfaceActive(): boolean;
    addClass(className: string): void;
    removeClass(className: string): void;
    registerInteractionHandler(evtType: string, handler: EventListener): void;
    deregisterInteractionHandler(evtType: string, handler: EventListener): void;
    registerResizeHandler(handler: EventListener): void;
    deregisterResizeHandler(handler: EventListener): void;
    updateCssVariable(varName: string, value: string | null): void;
    computeBoundingRect(): ClientRect | null;
    getWindowPageOffset(): {
        x: number;
        y: number;
    };
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    toObject(): {};
}
