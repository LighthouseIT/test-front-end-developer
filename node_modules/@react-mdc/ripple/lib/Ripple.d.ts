/// <reference types="react" />
import * as React from "react";
import { Map, Set } from "immutable";
import { ClassNameMetaBase, DefaultComponentBase } from "@react-mdc/base";
import { Color } from "./types";
export declare const CLASS_NAME: string;
export declare type MetaProps = {
    unbounded?: boolean;
    color?: Color;
    className?: string;
};
export declare type ChildProps = {
    className?: string;
};
export declare type State = {
    foundationClasses: Set<string>;
    foundationCssVars: Map<string, string | null>;
    foundationEventListeners: Map<string, Set<EventListener>>;
};
/**
 * Ripple foundation component
 */
export declare class Meta extends ClassNameMetaBase<ChildProps, MetaProps, State> {
    static defaultProps: {
        unbounded: boolean;
    };
    state: State;
    private adapter;
    private foundation;
    constructor(props: any);
    activate(): void;
    deactivate(): void;
    getDOMNode(): Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected renderNativeDOMProps(): {
        cssVariables: any;
        eventListeners: any;
    };
    protected renderBaseClassName(): string;
    protected renderClassValues(): any[];
}
export default class Ripple extends DefaultComponentBase<React.HTMLProps<HTMLDivElement>, MetaProps, {}> {
    static Meta: typeof Meta;
    protected getMetaComponent(): typeof Meta;
    protected getMetaPropNames(): string[];
    protected getChildComponent(): string;
}
