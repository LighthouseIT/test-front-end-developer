"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReactDOM = require("react-dom");
var mdc_ripple_1 = require("@material/ripple/dist/mdc.ripple");
var immutable_1 = require("immutable");
var base_1 = require("@react-mdc/base");
var adapter_1 = require("./adapter");
var rippleUtil_1 = require("./rippleUtil");
var utils = require("./utils");
var constants_1 = require("./constants");
var MATCHES = rippleUtil_1.getMatchesProperty(HTMLElement.prototype);
exports.CLASS_NAME = constants_1.SURFACE_BASE_CLASS_NAME;
/**
 * Ripple foundation component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            foundationClasses: immutable_1.OrderedSet(),
            foundationCssVars: immutable_1.OrderedMap(),
            foundationEventListeners: immutable_1.OrderedMap(),
        };
        _this.adapter = new adapter_1.FoundationAdapter();
        _this.foundation = new mdc_ripple_1.MDCRippleFoundation(_this.adapter.toObject());
        return _this;
    }
    // Exposed methods
    Meta.prototype.activate = function () {
        this.foundation.activate();
    };
    Meta.prototype.deactivate = function () {
        this.foundation.deactivate();
    };
    Meta.prototype.getDOMNode = function () {
        return ReactDOM.findDOMNode(this);
    };
    // Foundation lifecycle
    Meta.prototype.componentDidMount = function () {
        this.adapter.setRippleAdapter(new RippleAdapterImpl(this));
        this.foundation.init();
    };
    Meta.prototype.componentWillUnmount = function () {
        this.foundation.destroy();
        this.adapter.setRippleAdapter(new adapter_1.RippleAdapter());
    };
    Meta.prototype.renderNativeDOMProps = function () {
        return {
            cssVariables: this.state.foundationCssVars.toJS(),
            eventListeners: this.state.foundationEventListeners.toJS(),
        };
    };
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.prototype.renderClassValues = function () {
        var classes = [];
        if (this.props.color != null) {
            classes.push(utils.classNameForColor(this.props.color));
        }
        return [
            classes,
            this.state.foundationClasses.toJS(),
        ];
    };
    Meta.defaultProps = {
        unbounded: false,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var RippleAdapterImpl = (function (_super) {
    __extends(RippleAdapterImpl, _super);
    function RippleAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    RippleAdapterImpl.prototype.browserSupportsCssVars = function () {
        return rippleUtil_1.supportsCssVariables(window);
    };
    RippleAdapterImpl.prototype.isUnbounded = function () {
        return this.element.props.unbounded || false;
    };
    RippleAdapterImpl.prototype.isSurfaceActive = function () {
        return this.element.getDOMNode()[MATCHES](":active");
    };
    RippleAdapterImpl.prototype.addClass = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.add(className),
        }); });
    };
    RippleAdapterImpl.prototype.removeClass = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.remove(className),
        }); });
    };
    RippleAdapterImpl.prototype.registerInteractionHandler = function (evtType, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evtType, immutable_1.OrderedSet(), function (x) { return x.add(handler); }),
        }); });
    };
    RippleAdapterImpl.prototype.deregisterInteractionHandler = function (evtType, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evtType, immutable_1.OrderedSet(), function (x) { return x.delete(handler); }),
        }); });
    };
    RippleAdapterImpl.prototype.registerResizeHandler = function (handler) {
        window.addEventListener("resize", handler);
    };
    RippleAdapterImpl.prototype.deregisterResizeHandler = function (handler) {
        window.removeEventListener("resize", handler);
    };
    RippleAdapterImpl.prototype.updateCssVariable = function (varName, value) {
        if (value == null) {
            this.element.setState(function (state) { return ({
                foundationCssVars: state.foundationCssVars.delete(varName),
            }); });
        }
        else {
            this.element.setState(function (state) { return ({
                foundationCssVars: state.foundationCssVars.set(varName, value),
            }); });
        }
    };
    RippleAdapterImpl.prototype.computeBoundingRect = function () {
        return this.element.getDOMNode().getBoundingClientRect();
    };
    RippleAdapterImpl.prototype.getWindowPageOffset = function () {
        return { x: window.pageXOffset, y: window.pageYOffset };
    };
    return RippleAdapterImpl;
}(adapter_1.RippleAdapter));
var Ripple = (function (_super) {
    __extends(Ripple, _super);
    function Ripple() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ripple.prototype.getMetaComponent = function () {
        return Meta;
    };
    Ripple.prototype.getMetaPropNames = function () {
        return [
            "className",
            "unbounded",
            "color",
        ];
    };
    Ripple.prototype.getChildComponent = function () {
        return "div";
    };
    Ripple.Meta = Meta;
    return Ripple;
}(base_1.DefaultComponentBase));
exports.default = Ripple;
//# sourceMappingURL=Ripple.js.map