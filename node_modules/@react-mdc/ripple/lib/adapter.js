"use strict";
/**
 * Foundation adapters.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Ripple adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var RippleAdapter = (function () {
    function RippleAdapter() {
    }
    RippleAdapter.prototype.browserSupportsCssVars = function () {
        return false;
    };
    RippleAdapter.prototype.isUnbounded = function () {
        return false;
    };
    RippleAdapter.prototype.isSurfaceActive = function () {
        return false;
    };
    RippleAdapter.prototype.addClass = function (_className) {
    };
    RippleAdapter.prototype.removeClass = function (_className) {
    };
    RippleAdapter.prototype.registerInteractionHandler = function (_evtType, _handler) {
    };
    RippleAdapter.prototype.deregisterInteractionHandler = function (_evtType, _handler) {
    };
    RippleAdapter.prototype.registerResizeHandler = function (_handler) {
    };
    RippleAdapter.prototype.deregisterResizeHandler = function (_handler) {
    };
    RippleAdapter.prototype.updateCssVariable = function (_varName, _value) {
    };
    RippleAdapter.prototype.computeBoundingRect = function () {
        return null;
    };
    RippleAdapter.prototype.getWindowPageOffset = function () {
        return { x: 0, y: 0 };
    };
    return RippleAdapter;
}());
exports.RippleAdapter = RippleAdapter;
/**
 * Composite adapter for MDCRippleFoundation
 */
var FoundationAdapter = (function () {
    function FoundationAdapter() {
        this.rippleAdapter = new RippleAdapter();
    }
    FoundationAdapter.prototype.setRippleAdapter = function (rippleAdapter) {
        this.rippleAdapter = rippleAdapter;
    };
    FoundationAdapter.prototype.browserSupportsCssVars = function () {
        return this.rippleAdapter.browserSupportsCssVars();
    };
    FoundationAdapter.prototype.isUnbounded = function () {
        return this.rippleAdapter.isUnbounded();
    };
    FoundationAdapter.prototype.isSurfaceActive = function () {
        return this.rippleAdapter.isSurfaceActive();
    };
    FoundationAdapter.prototype.addClass = function (className) {
        this.rippleAdapter.addClass(className);
    };
    FoundationAdapter.prototype.removeClass = function (className) {
        this.rippleAdapter.removeClass(className);
    };
    FoundationAdapter.prototype.registerInteractionHandler = function (evtType, handler) {
        this.rippleAdapter.registerInteractionHandler(evtType, handler);
    };
    FoundationAdapter.prototype.deregisterInteractionHandler = function (evtType, handler) {
        this.rippleAdapter.deregisterInteractionHandler(evtType, handler);
    };
    FoundationAdapter.prototype.registerResizeHandler = function (handler) {
        this.rippleAdapter.registerResizeHandler(handler);
    };
    FoundationAdapter.prototype.deregisterResizeHandler = function (handler) {
        this.rippleAdapter.deregisterResizeHandler(handler);
    };
    FoundationAdapter.prototype.updateCssVariable = function (varName, value) {
        this.rippleAdapter.updateCssVariable(varName, value);
    };
    FoundationAdapter.prototype.computeBoundingRect = function () {
        return this.rippleAdapter.computeBoundingRect();
    };
    FoundationAdapter.prototype.getWindowPageOffset = function () {
        return this.rippleAdapter.getWindowPageOffset();
    };
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    FoundationAdapter.prototype.toObject = function () {
        var _this = this;
        var keys = Object.getOwnPropertyNames(Object.getPrototypeOf(this));
        var object = {};
        keys.forEach(function (key) {
            object[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this[key].apply(_this, args);
            };
        });
        return object;
    };
    return FoundationAdapter;
}());
exports.FoundationAdapter = FoundationAdapter;
//# sourceMappingURL=adapter.js.map