"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var classNames = require("classnames");
var PropTypes = require("prop-types");
var mdc_dialog_1 = require("@material/dialog/dist/mdc.dialog");
var immutable_1 = require("immutable");
var base_1 = require("@react-mdc/base");
var util_1 = require("@react-mdc/base/lib/util");
var constants_1 = require("./constants");
var adapter_1 = require("./adapter");
var OPEN_CLASS_NAME = mdc_dialog_1.MDCDialogFoundation.cssClasses.OPEN;
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME;
exports.propertyClassNames = {
    DARK: exports.CLASS_NAME + "--theme-dark",
};
/**
 * Dialog component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            foundationClasses: immutable_1.OrderedSet(),
            foundationAttributes: immutable_1.Map(),
            foundationEventListeners: immutable_1.Map(),
            open: false,
        };
        _this.adapter = new adapter_1.FoundationAdapter();
        _this.foundation = new mdc_dialog_1.MDCDialogFoundation(_this.adapter.toObject());
        return _this;
    }
    Meta.prototype.getChildContext = function () {
        return {
            adapter: this.adapter,
        };
    };
    // Sync props and internal state
    Meta.prototype.componentWillReceiveProps = function (props) {
        if ((!!props.open) !== (!!this.state.open)) {
            if (props.open) {
                this.foundation.open();
            }
            else {
                this.foundation.close();
            }
        }
    };
    // Foundation lifecycle
    Meta.prototype.componentDidMount = function () {
        this.adapter.setContainerAdapter(new ContainerAdapterImpl(this));
        this.foundation.init();
    };
    Meta.prototype.componentWillUnmount = function () {
        this.foundation.destroy();
        this.adapter.setContainerAdapter(new adapter_1.ContainerAdapter());
    };
    /* Public APIs */
    Meta.prototype.accept = function (notifyChange) {
        if (notifyChange === void 0) { notifyChange = false; }
        this.foundation.accept(notifyChange);
    };
    Meta.prototype.cancel = function (notifyChange) {
        if (notifyChange === void 0) { notifyChange = false; }
        this.foundation.cancel(notifyChange);
    };
    Meta.prototype.getClassName = function (props, state) {
        return classNames(exports.CLASS_NAME, (_a = {},
            _a[exports.propertyClassNames.DARK] = this.props.dark,
            _a), state.foundationClasses.toJS());
        var _a;
    };
    Meta.prototype.renderNativeDOMProps = function () {
        return {
            attributes: this.state.foundationAttributes.toJS(),
            eventListeners: this.state.foundationEventListeners.toJS(),
        };
    };
    Meta.prototype.renderClassValues = function () {
        return [this.getClassName(this.props, this.state)];
    };
    Meta.displayName = "Container";
    Meta.childContextTypes = {
        adapter: PropTypes.instanceOf(adapter_1.FoundationAdapter),
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var ContainerAdapterImpl = (function (_super) {
    __extends(ContainerAdapterImpl, _super);
    function ContainerAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    ContainerAdapterImpl.prototype.hasClass = function (className) {
        return util_1.includes(this.element.getClassName(this.element.props, this.element.state).split(/\s+/), className);
    };
    ContainerAdapterImpl.prototype.addClass = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.add(className),
        }); });
        // MDCDialog does not provide opening/closing event.
        // But we can assume open/close by adding/removing OPEN_CLASS_NAME
        if (className === OPEN_CLASS_NAME) {
            this.element.setState({
                open: true,
            });
            if (this.element.props.onOpen) {
                this.element.props.onOpen(this.element);
            }
        }
    };
    ContainerAdapterImpl.prototype.removeClass = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.remove(className),
        }); });
        // MDCDialog does not provide opening/closing event.
        // But we can assume open/close by adding/removing OPEN_CLASS_NAME
        if (className === OPEN_CLASS_NAME) {
            this.element.setState({
                open: false,
            });
            if (this.element.props.onClose) {
                this.element.props.onClose(this.element);
            }
        }
    };
    ContainerAdapterImpl.prototype.setAttr = function (attr, val) {
        this.element.setState(function (state) { return ({
            foundationAttributes: state.foundationAttributes.set(attr, val),
        }); });
    };
    ContainerAdapterImpl.prototype.registerInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.add(handler); }),
        }); });
    };
    ContainerAdapterImpl.prototype.deregisterInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.delete(handler); }),
        }); });
    };
    ContainerAdapterImpl.prototype.notifyAccept = function () {
        if (this.element.props.onAccept != null) {
            this.element.props.onAccept(this.element);
        }
    };
    ContainerAdapterImpl.prototype.notifyCancel = function () {
        if (this.element.props.onCancel != null) {
            this.element.props.onCancel(this.element);
        }
    };
    return ContainerAdapterImpl;
}(adapter_1.ContainerAdapter));
var Container = (function (_super) {
    __extends(Container, _super);
    function Container() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Container.prototype.getMetaComponent = function () {
        return Meta;
    };
    Container.prototype.getMetaPropNames = function () {
        return [
            "className",
            "dark",
            "open",
            "onAccept",
            "onCancel",
            "onOpen",
            "onClose",
        ];
    };
    Container.prototype.getChildComponent = function () {
        return "aside";
    };
    Container.Meta = Meta;
    return Container;
}(base_1.DefaultComponentBase));
exports.default = Container;
//# sourceMappingURL=Container.js.map