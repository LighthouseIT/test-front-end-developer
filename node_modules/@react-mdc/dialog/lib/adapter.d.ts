/**
 * Container adapter
 */
export declare class ContainerAdapter {
    hasClass(_className: string): boolean;
    addClass(_className: string): void;
    removeClass(_className: string): void;
    setAttr(_attr: string, _val: string): void;
    registerInteractionHandler(_evt: string, _handler: EventListener): void;
    deregisterInteractionHandler(_evt: string, _handler: EventListener): void;
    notifyAccept(): void;
    notifyCancel(): void;
}
export declare class SurfaceAdapter {
    registerSurfaceInteractionHandler(_evt: string, _handler: EventListener): void;
    deregisterSurfaceInteractionHandler(_evt: string, _handler: EventListener): void;
    numFocusableTargets(): number;
    setDialogFocusFirstTarget(): void;
    setInitialFocus(): void;
    getFocusableElements(): Element[];
}
/**
 * Composite adapter for MDCDialogFoundation
 */
export declare class FoundationAdapter {
    private containerAdapter;
    private surfaceAdapter;
    constructor();
    setContainerAdapter(containerAdapter: ContainerAdapter): void;
    setSurfaceAdapter(surfaceAdapter: SurfaceAdapter): void;
    hasClass(className: string): boolean;
    addClass(className: string): void;
    removeClass(className: string): void;
    setAttr(attr: string, val: string): void;
    registerInteractionHandler(evt: string, handler: EventListener): void;
    deregisterInteractionHandler(evt: string, handler: EventListener): void;
    notifyAccept(): void;
    notifyCancel(): void;
    registerSurfaceInteractionHandler(evt: string, handler: EventListener): void;
    deregisterSurfaceInteractionHandler(evt: string, handler: EventListener): void;
    numFocusableTargets(): number;
    setDialogFocusFirstTarget(): void;
    setInitialFocus(): void;
    getFocusableElements(): Element[];
    eventTargetHasClass(target: EventTarget & Element, className: string): boolean;
    registerDocumentKeydownHandler(handler: EventListener): void;
    deregisterDocumentKeydownHandler(handler: EventListener): void;
    registerFocusTrappingHandler(handler: EventListener): void;
    deregisterFocusTrappingHandler(handler: EventListener): void;
    getFocusedTarget(): Element;
    setFocusedTarget(target: EventTarget & HTMLElement): void;
    makeElementUntabbable(el: Element): void;
    saveElementTabState(el: Element): void;
    restoreElementTabState(el: Element): void;
    addBodyClass(className: string): void;
    removeBodyClass(className: string): void;
    setBodyAttr(attr: string, val: string): void;
    rmBodyAttr(attr: string): void;
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    toObject(): {};
}
