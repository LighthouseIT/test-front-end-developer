"use strict";
/**
 * Foundation adapters.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var mdc_dialog_1 = require("@material/dialog/dist/mdc.dialog");
/**
 * Container adapter
 */
var ContainerAdapter = (function () {
    function ContainerAdapter() {
    }
    ContainerAdapter.prototype.hasClass = function (_className) {
        return false;
    };
    ContainerAdapter.prototype.addClass = function (_className) {
    };
    ContainerAdapter.prototype.removeClass = function (_className) {
    };
    ContainerAdapter.prototype.setAttr = function (_attr, _val) {
    };
    ContainerAdapter.prototype.registerInteractionHandler = function (_evt, _handler) {
    };
    ContainerAdapter.prototype.deregisterInteractionHandler = function (_evt, _handler) {
    };
    ContainerAdapter.prototype.notifyAccept = function () {
    };
    ContainerAdapter.prototype.notifyCancel = function () {
    };
    return ContainerAdapter;
}());
exports.ContainerAdapter = ContainerAdapter;
var SurfaceAdapter = (function () {
    function SurfaceAdapter() {
    }
    SurfaceAdapter.prototype.registerSurfaceInteractionHandler = function (_evt, _handler) {
    };
    SurfaceAdapter.prototype.deregisterSurfaceInteractionHandler = function (_evt, _handler) {
    };
    SurfaceAdapter.prototype.numFocusableTargets = function () {
        return 0;
    };
    SurfaceAdapter.prototype.setDialogFocusFirstTarget = function () {
    };
    SurfaceAdapter.prototype.setInitialFocus = function () {
    };
    SurfaceAdapter.prototype.getFocusableElements = function () {
        return [];
    };
    return SurfaceAdapter;
}());
exports.SurfaceAdapter = SurfaceAdapter;
/**
 * Composite adapter for MDCDialogFoundation
 */
var FoundationAdapter = (function () {
    function FoundationAdapter() {
        this.containerAdapter = new ContainerAdapter();
        this.surfaceAdapter = new SurfaceAdapter();
    }
    FoundationAdapter.prototype.setContainerAdapter = function (containerAdapter) {
        this.containerAdapter = containerAdapter;
    };
    FoundationAdapter.prototype.setSurfaceAdapter = function (surfaceAdapter) {
        this.surfaceAdapter = surfaceAdapter;
    };
    /* Container */
    FoundationAdapter.prototype.hasClass = function (className) {
        return this.containerAdapter.hasClass(className);
    };
    FoundationAdapter.prototype.addClass = function (className) {
        this.containerAdapter.addClass(className);
    };
    FoundationAdapter.prototype.removeClass = function (className) {
        this.containerAdapter.removeClass(className);
    };
    FoundationAdapter.prototype.setAttr = function (attr, val) {
        this.containerAdapter.setAttr(attr, val);
    };
    FoundationAdapter.prototype.registerInteractionHandler = function (evt, handler) {
        this.containerAdapter.registerInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.deregisterInteractionHandler = function (evt, handler) {
        this.containerAdapter.deregisterInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.notifyAccept = function () {
        this.containerAdapter.notifyAccept();
    };
    FoundationAdapter.prototype.notifyCancel = function () {
        this.containerAdapter.notifyCancel();
    };
    /* Surface */
    FoundationAdapter.prototype.registerSurfaceInteractionHandler = function (evt, handler) {
        this.surfaceAdapter.registerSurfaceInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.deregisterSurfaceInteractionHandler = function (evt, handler) {
        this.surfaceAdapter.deregisterSurfaceInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.numFocusableTargets = function () {
        return this.surfaceAdapter.numFocusableTargets();
    };
    FoundationAdapter.prototype.setDialogFocusFirstTarget = function () {
        this.surfaceAdapter.setDialogFocusFirstTarget();
    };
    FoundationAdapter.prototype.setInitialFocus = function () {
        this.surfaceAdapter.setInitialFocus();
    };
    FoundationAdapter.prototype.getFocusableElements = function () {
        return this.surfaceAdapter.getFocusableElements();
    };
    /* Common */
    FoundationAdapter.prototype.eventTargetHasClass = function (target, className) {
        return target.classList.contains(className);
    };
    FoundationAdapter.prototype.registerDocumentKeydownHandler = function (handler) {
        document.addEventListener("keydown", handler);
    };
    FoundationAdapter.prototype.deregisterDocumentKeydownHandler = function (handler) {
        document.removeEventListener("keydown", handler);
    };
    FoundationAdapter.prototype.registerFocusTrappingHandler = function (handler) {
        document.addEventListener("focus", handler, true);
    };
    FoundationAdapter.prototype.deregisterFocusTrappingHandler = function (handler) {
        document.removeEventListener("focus", handler, true);
    };
    FoundationAdapter.prototype.getFocusedTarget = function () {
        return document.activeElement;
    };
    FoundationAdapter.prototype.setFocusedTarget = function (target) {
        target.focus();
    };
    FoundationAdapter.prototype.makeElementUntabbable = function (el) {
        el.setAttribute("tabindex", "-1");
    };
    FoundationAdapter.prototype.saveElementTabState = function (el) {
        mdc_dialog_1.util.saveElementTabState(el);
    };
    FoundationAdapter.prototype.restoreElementTabState = function (el) {
        mdc_dialog_1.util.restoreElementTabState(el);
    };
    FoundationAdapter.prototype.addBodyClass = function (className) {
        document.body.classList.add(className);
    };
    FoundationAdapter.prototype.removeBodyClass = function (className) {
        document.body.classList.remove(className);
    };
    FoundationAdapter.prototype.setBodyAttr = function (attr, val) {
        document.body.setAttribute(attr, val);
    };
    FoundationAdapter.prototype.rmBodyAttr = function (attr) {
        document.body.removeAttribute(attr);
    };
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    FoundationAdapter.prototype.toObject = function () {
        var _this = this;
        var keys = Object.getOwnPropertyNames(Object.getPrototypeOf(this));
        var object = {};
        keys.forEach(function (key) {
            object[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this[key].apply(_this, args);
            };
        });
        return object;
    };
    return FoundationAdapter;
}());
exports.FoundationAdapter = FoundationAdapter;
//# sourceMappingURL=adapter.js.map