"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReactDOM = require("react-dom");
var immutable_1 = require("immutable");
var PropTypes = require("prop-types");
var base_1 = require("@react-mdc/base");
var mdc_dialog_1 = require("@material/dialog/dist/mdc.dialog");
var adapter_1 = require("./adapter");
var constants_1 = require("./constants");
var FOCUSABLE_ELEMENTS = mdc_dialog_1.MDCDialogFoundation.strings.FOCUSABLE_ELEMENTS;
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME + "__surface";
/**
 * Surface component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            foundationClasses: immutable_1.OrderedSet(),
            foundationEventListeners: immutable_1.Map(),
        };
        return _this;
    }
    Meta.prototype.componentDidMount = function () {
        this.context.adapter.setSurfaceAdapter(new SurfaceAdapterImpl(this));
    };
    Meta.prototype.componentWillUnmount = function () {
        this.context.adapter.setSurfaceAdapter(new adapter_1.SurfaceAdapter());
    };
    Meta.prototype.renderNativeDOMProps = function () {
        return {
            eventListeners: this.state.foundationEventListeners.toJS(),
        };
    };
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.contextTypes = {
        adapter: PropTypes.instanceOf(adapter_1.FoundationAdapter).isRequired,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var SurfaceAdapterImpl = (function (_super) {
    __extends(SurfaceAdapterImpl, _super);
    function SurfaceAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    SurfaceAdapterImpl.prototype.registerSurfaceInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.add(handler); }),
        }); });
    };
    SurfaceAdapterImpl.prototype.deregisterSurfaceInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.delete(handler); }),
        }); });
    };
    SurfaceAdapterImpl.prototype.numFocusableTargets = function () {
        return this.getDOMNode().querySelectorAll(FOCUSABLE_ELEMENTS)[0].length;
    };
    SurfaceAdapterImpl.prototype.setDialogFocusFirstTarget = function () {
        return this.getDOMNode().querySelectorAll(FOCUSABLE_ELEMENTS)[0].focus();
    };
    SurfaceAdapterImpl.prototype.setInitialFocus = function () {
    };
    SurfaceAdapterImpl.prototype.getFocusableElements = function () {
        return this.getDOMNode().querySelectorAll(FOCUSABLE_ELEMENTS);
    };
    SurfaceAdapterImpl.prototype.getDOMNode = function () {
        return ReactDOM.findDOMNode(this.element);
    };
    return SurfaceAdapterImpl;
}(adapter_1.SurfaceAdapter));
var Surface = (function (_super) {
    __extends(Surface, _super);
    function Surface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Surface.prototype.getMetaComponent = function () {
        return Meta;
    };
    Surface.prototype.getMetaPropNames = function () {
        return [
            "className",
        ];
    };
    Surface.prototype.getChildComponent = function () {
        return "div";
    };
    Surface.Meta = Meta;
    return Surface;
}(base_1.DefaultComponentBase));
exports.default = Surface;
//# sourceMappingURL=Surface.js.map