"use strict";
/* eslint-disable */
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var TAB_DATA = "data-mdc-tabindex";
var TAB_DATA_HANDLED = "data-mdc-tabindex-handled";
var _storedTransformPropertyName;
var _supportsPassive;
// Remap touch events to pointer events, if the browser doesn't support touch events.
function remapEvent(eventName, globalObj) {
    if (globalObj === void 0) { globalObj = window; }
    if (!("ontouchstart" in globalObj.document)) {
        switch (eventName) {
            case "touchstart":
                return "pointerdown";
            case "touchmove":
                return "pointermove";
            case "touchend":
                return "pointerup";
            default:
                return eventName;
        }
    }
    return eventName;
}
exports.remapEvent = remapEvent;
// Choose the correct transform property to use on the current browser.
function getTransformPropertyName(globalObj, forceRefresh) {
    if (globalObj === void 0) { globalObj = window; }
    if (forceRefresh === void 0) { forceRefresh = false; }
    if (_storedTransformPropertyName === undefined || forceRefresh) {
        var el = globalObj.document.createElement("div");
        var transformPropertyName = ("transform" in el.style ? "transform" : "-webkit-transform");
        _storedTransformPropertyName = transformPropertyName;
    }
    return _storedTransformPropertyName;
}
exports.getTransformPropertyName = getTransformPropertyName;
// Determine whether the current browser supports CSS properties.
function supportsCssCustomProperties(globalObj) {
    if (globalObj === void 0) { globalObj = window; }
    if ("CSS" in globalObj) {
        return globalObj.CSS.supports("(--color: red)");
    }
    return false;
}
exports.supportsCssCustomProperties = supportsCssCustomProperties;
// Determine whether the current browser supports passive event listeners, and if so, use them.
function applyPassive(globalObj, forceRefresh) {
    if (globalObj === void 0) { globalObj = window; }
    if (forceRefresh === void 0) { forceRefresh = false; }
    if (_supportsPassive === undefined || forceRefresh) {
        var isSupported_1 = false;
        try {
            var checker = {};
            Object.defineProperty(checker, "passive", { get: function () { isSupported_1 = true; } });
            globalObj.document.addEventListener("test", null, checker);
        }
        catch (e) { }
        _supportsPassive = isSupported_1;
    }
    return _supportsPassive ? { passive: true } : false;
}
exports.applyPassive = applyPassive;
// Save the tab state for an element.
function saveElementTabState(el) {
    if (el.hasAttribute("tabindex")) {
        el.setAttribute(TAB_DATA, el.getAttribute("tabindex"));
    }
    el.setAttribute(TAB_DATA_HANDLED, true);
}
exports.saveElementTabState = saveElementTabState;
// Restore the tab state for an element, if it was saved.
function restoreElementTabState(el) {
    // Only modify elements we've already handled, in case anything was dynamically added since we saved state.
    if (el.hasAttribute(TAB_DATA_HANDLED)) {
        if (el.hasAttribute(TAB_DATA)) {
            el.setAttribute("tabindex", el.getAttribute(TAB_DATA));
            el.removeAttribute(TAB_DATA);
        }
        else {
            el.removeAttribute("tabindex");
        }
        el.removeAttribute(TAB_DATA_HANDLED);
    }
}
exports.restoreElementTabState = restoreElementTabState;
//# sourceMappingURL=drawerUtil.js.map