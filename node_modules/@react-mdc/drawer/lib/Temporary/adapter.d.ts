/**
 * Container adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class ContainerAdapter {
    addClass(_className: string): void;
    removeClass(_className: string): void;
    hasClass(_className: string): boolean;
    registerInteractionHandler(_evt: string, _handler: EventListener): void;
    deregisterInteractionHandler(_evt: string, _handler: EventListener): void;
    registerTransitionEndHandler(_handler: EventListener): void;
    deregisterTransitionEndHandler(_handler: EventListener): void;
    registerDocumentKeydownHandler(_handler: EventListener): void;
    deregisterDocumentKeydownHandler(_handler: EventListener): void;
    updateCssVariable(_value: string): void;
    saveElementTabState(_el: Element): void;
    restoreElementTabState(_el: Element): void;
    makeElementUntabbable(_el: Element): void;
    isRtl(): boolean;
}
/**
 * Drawer adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class DrawerAdapter {
    registerDrawerInteractionHandler(_evt: string, _handler: EventListener): void;
    deregisterDrawerInteractionHandler(_evt: string, _handler: EventListener): void;
    getDrawerWidth(): number;
    setTranslateX(_value: number): void;
    isDrawer(_el: Element): boolean;
    getFocusableElements(): NodeListOf<Element>;
    hasNecessaryDom(): boolean;
}
/**
 * Composite adapter for MDCTemporaryDrawerFoundation
 */
export declare class FoundationAdapter {
    private containerAdapter;
    private drawerAdapter;
    constructor();
    setContainerAdapter(containerAdapter: ContainerAdapter): void;
    setDrawerAdapter(drawerAdapter: DrawerAdapter): void;
    addClass(className: string): void;
    removeClass(className: string): void;
    hasClass(className: string): boolean;
    registerInteractionHandler(evt: string, handler: EventListener): void;
    deregisterInteractionHandler(evt: string, handler: EventListener): void;
    registerTransitionEndHandler(handler: EventListener): void;
    deregisterTransitionEndHandler(handler: EventListener): void;
    registerDocumentKeydownHandler(handler: EventListener): void;
    deregisterDocumentKeydownHandler(handler: EventListener): void;
    updateCssVariable(value: string): void;
    saveElementTabState(el: Element): void;
    restoreElementTabState(el: Element): void;
    makeElementUntabbable(el: Element): void;
    isRtl(): boolean;
    registerDrawerInteractionHandler(evt: string, handler: EventListener): void;
    deregisterDrawerInteractionHandler(evt: string, handler: EventListener): void;
    getDrawerWidth(): number;
    setTranslateX(value: number): void;
    isDrawer(el: Element): boolean;
    getFocusableElements(): NodeListOf<Element>;
    hasNecessaryDom(): boolean;
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    toObject(): {};
}
