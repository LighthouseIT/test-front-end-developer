"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReactDOM = require("react-dom");
var mdc_drawer_1 = require("@material/drawer/dist/mdc.drawer");
var immutable_1 = require("immutable");
var PropTypes = require("prop-types");
var base_1 = require("@react-mdc/base");
var adapter_1 = require("./adapter");
var constants_1 = require("./constants");
var drawerUtil = require("./drawerUtil");
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME + "__drawer";
var FOCUSABLE_ELEMENTS = mdc_drawer_1.MDCTemporaryDrawerFoundation.strings.FOCUSABLE_ELEMENTS;
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            foundationCssVars: immutable_1.Map(),
            foundationEventListeners: immutable_1.Map(),
        };
        return _this;
    }
    Meta.prototype.componentDidMount = function () {
        this.context.adapter.setDrawerAdapter(new DrawerAdapterImpl(this));
    };
    Meta.prototype.componentWillUnmount = function () {
        this.context.adapter.setDrawerAdapter(new adapter_1.DrawerAdapter());
    };
    Meta.prototype.renderNativeDOMProps = function () {
        return {
            cssVariables: this.state.foundationCssVars.toJS(),
            eventListeners: this.state.foundationEventListeners.toJS(),
        };
    };
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.contextTypes = {
        adapter: PropTypes.instanceOf(adapter_1.FoundationAdapter).isRequired,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var DrawerAdapterImpl = (function (_super) {
    __extends(DrawerAdapterImpl, _super);
    function DrawerAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    DrawerAdapterImpl.prototype.registerDrawerInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(drawerUtil.remapEvent(evt, window), immutable_1.OrderedSet(), function (x) { return x.add(handler); }),
        }); });
    };
    DrawerAdapterImpl.prototype.deregisterDrawerInteractionHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(drawerUtil.remapEvent(evt, window), immutable_1.OrderedSet(), function (x) { return x.delete(handler); }),
        }); });
    };
    DrawerAdapterImpl.prototype.hasNecessaryDom = function () {
        return this.getDOMNode() != null;
    };
    DrawerAdapterImpl.prototype.getDrawerWidth = function () {
        return this.getDOMNode().getBoundingClientRect().width;
    };
    DrawerAdapterImpl.prototype.setTranslateX = function (value) {
        if (value == null) {
            this.element.setState(function (state) { return ({
                foundationCssVars: state.foundationCssVars.delete(drawerUtil.getTransformPropertyName()),
            }); });
        }
        else {
            this.element.setState(function (state) { return ({
                foundationCssVars: state
                    .foundationCssVars
                    .set(drawerUtil.getTransformPropertyName(), "translateX(" + value + "px)"),
            }); });
        }
    };
    DrawerAdapterImpl.prototype.isDrawer = function (el) {
        return this.getDOMNode() === el;
    };
    DrawerAdapterImpl.prototype.getFocusableElements = function () {
        return this.getDOMNode().querySelectorAll(FOCUSABLE_ELEMENTS);
    };
    DrawerAdapterImpl.prototype.getDOMNode = function () {
        return ReactDOM.findDOMNode(this.element);
    };
    return DrawerAdapterImpl;
}(adapter_1.DrawerAdapter));
var Drawer = (function (_super) {
    __extends(Drawer, _super);
    function Drawer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Drawer.prototype.getMetaComponent = function () {
        return Meta;
    };
    Drawer.prototype.getMetaPropNames = function () {
        return [
            "className",
        ];
    };
    Drawer.prototype.getChildComponent = function () {
        return "nav";
    };
    Drawer.Meta = Meta;
    return Drawer;
}(base_1.DefaultComponentBase));
exports.default = Drawer;
//# sourceMappingURL=Drawer.js.map