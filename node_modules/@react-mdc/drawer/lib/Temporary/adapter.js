"use strict";
/**
 * Foundation adapters.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function createEmptyNodeList() {
    var item = function () { throw new Error("This is an empty node list"); };
    return __assign({}, ([]), { item: item });
}
/**
 * Container adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var ContainerAdapter = (function () {
    function ContainerAdapter() {
    }
    ContainerAdapter.prototype.addClass = function (_className) {
    };
    ContainerAdapter.prototype.removeClass = function (_className) {
    };
    ContainerAdapter.prototype.hasClass = function (_className) {
        return false;
    };
    ContainerAdapter.prototype.registerInteractionHandler = function (_evt, _handler) {
    };
    ContainerAdapter.prototype.deregisterInteractionHandler = function (_evt, _handler) {
    };
    ContainerAdapter.prototype.registerTransitionEndHandler = function (_handler) {
    };
    ContainerAdapter.prototype.deregisterTransitionEndHandler = function (_handler) {
    };
    ContainerAdapter.prototype.registerDocumentKeydownHandler = function (_handler) {
    };
    ContainerAdapter.prototype.deregisterDocumentKeydownHandler = function (_handler) {
    };
    ContainerAdapter.prototype.updateCssVariable = function (_value) {
    };
    ContainerAdapter.prototype.saveElementTabState = function (_el) {
    };
    ContainerAdapter.prototype.restoreElementTabState = function (_el) {
    };
    ContainerAdapter.prototype.makeElementUntabbable = function (_el) {
    };
    ContainerAdapter.prototype.isRtl = function () {
        return false;
    };
    return ContainerAdapter;
}());
exports.ContainerAdapter = ContainerAdapter;
/**
 * Drawer adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var DrawerAdapter = (function () {
    function DrawerAdapter() {
    }
    DrawerAdapter.prototype.registerDrawerInteractionHandler = function (_evt, _handler) {
    };
    DrawerAdapter.prototype.deregisterDrawerInteractionHandler = function (_evt, _handler) {
    };
    DrawerAdapter.prototype.getDrawerWidth = function () {
        return 0;
    };
    DrawerAdapter.prototype.setTranslateX = function (_value) {
    };
    DrawerAdapter.prototype.isDrawer = function (_el) {
        return false;
    };
    DrawerAdapter.prototype.getFocusableElements = function () {
        return createEmptyNodeList();
    };
    DrawerAdapter.prototype.hasNecessaryDom = function () {
        return false;
    };
    return DrawerAdapter;
}());
exports.DrawerAdapter = DrawerAdapter;
/**
 * Composite adapter for MDCTemporaryDrawerFoundation
 */
var FoundationAdapter = (function () {
    function FoundationAdapter() {
        this.containerAdapter = new ContainerAdapter();
        this.drawerAdapter = new DrawerAdapter();
    }
    FoundationAdapter.prototype.setContainerAdapter = function (containerAdapter) {
        this.containerAdapter = containerAdapter;
    };
    FoundationAdapter.prototype.setDrawerAdapter = function (drawerAdapter) {
        this.drawerAdapter = drawerAdapter;
    };
    FoundationAdapter.prototype.addClass = function (className) {
        this.containerAdapter.addClass(className);
    };
    FoundationAdapter.prototype.removeClass = function (className) {
        this.containerAdapter.removeClass(className);
    };
    FoundationAdapter.prototype.hasClass = function (className) {
        return this.containerAdapter.hasClass(className);
    };
    FoundationAdapter.prototype.registerInteractionHandler = function (evt, handler) {
        this.containerAdapter.registerInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.deregisterInteractionHandler = function (evt, handler) {
        this.containerAdapter.deregisterInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.registerTransitionEndHandler = function (handler) {
        this.containerAdapter.registerTransitionEndHandler(handler);
    };
    FoundationAdapter.prototype.deregisterTransitionEndHandler = function (handler) {
        this.containerAdapter.deregisterTransitionEndHandler(handler);
    };
    FoundationAdapter.prototype.registerDocumentKeydownHandler = function (handler) {
        this.containerAdapter.registerDocumentKeydownHandler(handler);
    };
    FoundationAdapter.prototype.deregisterDocumentKeydownHandler = function (handler) {
        this.containerAdapter.deregisterDocumentKeydownHandler(handler);
    };
    FoundationAdapter.prototype.updateCssVariable = function (value) {
        this.containerAdapter.updateCssVariable(value);
    };
    FoundationAdapter.prototype.saveElementTabState = function (el) {
        this.containerAdapter.saveElementTabState(el);
    };
    FoundationAdapter.prototype.restoreElementTabState = function (el) {
        this.containerAdapter.restoreElementTabState(el);
    };
    FoundationAdapter.prototype.makeElementUntabbable = function (el) {
        this.containerAdapter.makeElementUntabbable(el);
    };
    FoundationAdapter.prototype.isRtl = function () {
        return this.containerAdapter.isRtl();
    };
    FoundationAdapter.prototype.registerDrawerInteractionHandler = function (evt, handler) {
        this.drawerAdapter.registerDrawerInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.deregisterDrawerInteractionHandler = function (evt, handler) {
        this.drawerAdapter.deregisterDrawerInteractionHandler(evt, handler);
    };
    FoundationAdapter.prototype.getDrawerWidth = function () {
        return this.drawerAdapter.getDrawerWidth();
    };
    FoundationAdapter.prototype.setTranslateX = function (value) {
        this.drawerAdapter.setTranslateX(value);
    };
    FoundationAdapter.prototype.isDrawer = function (el) {
        return this.drawerAdapter.isDrawer(el);
    };
    FoundationAdapter.prototype.getFocusableElements = function () {
        return this.drawerAdapter.getFocusableElements();
    };
    FoundationAdapter.prototype.hasNecessaryDom = function () {
        return this.drawerAdapter.hasNecessaryDom();
    };
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    FoundationAdapter.prototype.toObject = function () {
        var _this = this;
        var keys = Object.getOwnPropertyNames(Object.getPrototypeOf(this));
        var object = {};
        keys.forEach(function (key) {
            object[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this[key].apply(_this, args);
            };
        });
        return object;
    };
    return FoundationAdapter;
}());
exports.FoundationAdapter = FoundationAdapter;
//# sourceMappingURL=adapter.js.map