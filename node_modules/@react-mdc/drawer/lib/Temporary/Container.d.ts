/// <reference types="react" />
import * as React from "react";
import * as PropTypes from "prop-types";
import { Map, Set } from "immutable";
import { ClassNameMetaBase, DefaultComponentBase } from "@react-mdc/base";
import { FoundationAdapter } from "./adapter";
export declare const CLASS_NAME = "mdc-temporary-drawer";
export declare type MetaProps = {
    open?: boolean;
    rtl?: boolean;
    style?: {
        [name: string]: any;
    };
    onOpenDrawer?: (meta: Meta) => void;
    onCloseDrawer?: (meta: Meta) => void;
    className?: string;
};
export declare type ChildProps = {
    className?: string;
};
export declare type State = {
    foundationClasses: Set<string>;
    foundationCssVars: Map<string, string | null>;
    foundationEventListeners: Map<string, Set<EventListener>>;
    open: boolean;
};
export declare type ChildContext = {
    adapter: FoundationAdapter;
};
export declare class Meta extends ClassNameMetaBase<ChildProps, MetaProps, State> {
    static displayName: string;
    static childContextTypes: {
        adapter: PropTypes.Requireable<any>;
    };
    static defaultProps: {
        rtl: boolean;
        style: {};
    };
    state: State;
    private adapter;
    private foundation;
    constructor(props: any);
    getChildContext(): ChildContext;
    componentWillReceiveProps(props: MetaProps): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getClassName(_props: MetaProps, state: State): string;
    protected renderNativeDOMProps(): {
        cssVariables: any;
        eventListeners: any;
    };
    protected renderBaseClassName(): string;
    protected renderClassValues(): string[];
}
export default class Container extends DefaultComponentBase<React.HTMLProps<HTMLElement>, MetaProps, {}> {
    static Meta: typeof Meta;
    protected getMetaComponent(): typeof Meta;
    protected getMetaPropNames(): string[];
    protected getChildComponent(): string;
}
