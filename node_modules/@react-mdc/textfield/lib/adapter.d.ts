/**
 * Foundation adapters.
 */
/**
 * Container adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class ContainerAdapter {
    addClass(_className: string): void;
    removeClass(_className: string): void;
}
/**
 * Input adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class InputAdapter {
    registerInputFocusHandler(_handler: EventListener): void;
    deregisterInputFocusHandler(_handler: EventListener): void;
    registerInputBlurHandler(_handler: EventListener): void;
    deregisterInputBlurHandler(_handler: EventListener): void;
    registerInputInputHandler(_handler: EventListener): void;
    deregisterInputInputHandler(_handler: EventListener): void;
    registerInputKeydownHandler(_handler: EventListener): void;
    deregisterInputKeydownHandler(_handler: EventListener): void;
    getNativeInput(): {
        value: string;
        disabled: boolean;
        checkValidity: () => boolean;
    } | null;
}
/**
 * Label adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class LabelAdapter {
    addClassToLabel(_className: string): void;
    removeClassFromLabel(_className: string): void;
}
/**
 * Helptext adapter interface
 * Default implementations are noop and returns meaningless value.
 */
export declare class HelptextAdapter {
    addClassToHelptext(_className: string): void;
    removeClassFromHelptext(_className: string): void;
    helptextHasClass(_className: string): boolean;
    setHelptextAttr(_name: string, _value: string): void;
    removeHelptextAttr(_name: string): void;
}
/**
 * Composite adapter for MDCRadioFoundation
 */
export declare class FoundationAdapter {
    private containerAdapter;
    private inputAdapter;
    private labelAdapter;
    private helptextAdapter;
    constructor();
    setContainerAdapter(containerAdapter: ContainerAdapter): void;
    setInputAdapter(inputAdapter: InputAdapter): void;
    setLabelAdapter(labelAdapter: LabelAdapter): void;
    setHelptextAdapter(helptextAdapter: HelptextAdapter): void;
    addClass(className: string): void;
    removeClass(className: string): void;
    addClassToLabel(className: string): void;
    removeClassFromLabel(className: string): void;
    addClassToHelptext(className: string): void;
    removeClassFromHelptext(className: string): void;
    helptextHasClass(className: string): boolean;
    setHelptextAttr(name: string, value: string): void;
    removeHelptextAttr(name: string): void;
    registerInputFocusHandler(handler: EventListener): void;
    deregisterInputFocusHandler(handler: EventListener): void;
    registerInputBlurHandler(handler: EventListener): void;
    deregisterInputBlurHandler(handler: EventListener): void;
    registerInputInputHandler(handler: EventListener): void;
    deregisterInputInputHandler(handler: EventListener): void;
    registerInputKeydownHandler(handler: EventListener): void;
    deregisterInputKeydownHandler(handler: EventListener): void;
    getNativeInput(): {
        value: string;
        disabled: boolean;
        checkValidity: () => boolean;
    } | null;
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    toObject(): {};
}
