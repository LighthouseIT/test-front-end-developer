"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var PropTypes = require("prop-types");
var base_1 = require("@react-mdc/base");
var adapter_1 = require("./adapter");
var constants_1 = require("./constants");
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME + "__label";
/**
 * Textfield label component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            foundationClasses: immutable_1.OrderedSet(),
        };
        return _this;
    }
    Meta.prototype.componentDidMount = function () {
        this.context.adapter.setLabelAdapter(new LabelAdapterImpl(this));
    };
    Meta.prototype.componentWillUnmount = function () {
        this.context.adapter.setLabelAdapter(new adapter_1.LabelAdapter());
    };
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.prototype.renderClassValues = function () {
        return this.state.foundationClasses.toJS();
    };
    Meta.contextTypes = {
        adapter: PropTypes.instanceOf(adapter_1.FoundationAdapter).isRequired,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var LabelAdapterImpl = (function (_super) {
    __extends(LabelAdapterImpl, _super);
    function LabelAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    LabelAdapterImpl.prototype.addClassToLabel = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.add(className),
        }); });
    };
    LabelAdapterImpl.prototype.removeClassFromLabel = function (className) {
        this.element.setState(function (state) { return ({
            foundationClasses: state.foundationClasses.remove(className),
        }); });
    };
    return LabelAdapterImpl;
}(adapter_1.LabelAdapter));
var Label = (function (_super) {
    __extends(Label, _super);
    function Label() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Label.prototype.getMetaComponent = function () {
        return Meta;
    };
    Label.prototype.getMetaPropNames = function () {
        return [
            "className",
        ];
    };
    Label.prototype.getChildComponent = function () {
        return "label";
    };
    Label.Meta = Meta;
    return Label;
}(base_1.DefaultComponentBase));
exports.default = Label;
//# sourceMappingURL=Label.js.map