"use strict";
/**
 * Foundation adapters.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Container adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var ContainerAdapter = (function () {
    function ContainerAdapter() {
    }
    ContainerAdapter.prototype.addClass = function (_className) { };
    ContainerAdapter.prototype.removeClass = function (_className) { };
    return ContainerAdapter;
}());
exports.ContainerAdapter = ContainerAdapter;
/**
 * Input adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var InputAdapter = (function () {
    function InputAdapter() {
    }
    InputAdapter.prototype.registerInputFocusHandler = function (_handler) { };
    InputAdapter.prototype.deregisterInputFocusHandler = function (_handler) { };
    InputAdapter.prototype.registerInputBlurHandler = function (_handler) { };
    InputAdapter.prototype.deregisterInputBlurHandler = function (_handler) { };
    InputAdapter.prototype.registerInputInputHandler = function (_handler) { };
    InputAdapter.prototype.deregisterInputInputHandler = function (_handler) { };
    InputAdapter.prototype.registerInputKeydownHandler = function (_handler) { };
    InputAdapter.prototype.deregisterInputKeydownHandler = function (_handler) { };
    InputAdapter.prototype.getNativeInput = function () {
        return null;
    };
    return InputAdapter;
}());
exports.InputAdapter = InputAdapter;
/**
 * Label adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var LabelAdapter = (function () {
    function LabelAdapter() {
    }
    LabelAdapter.prototype.addClassToLabel = function (_className) { };
    LabelAdapter.prototype.removeClassFromLabel = function (_className) { };
    return LabelAdapter;
}());
exports.LabelAdapter = LabelAdapter;
/**
 * Helptext adapter interface
 * Default implementations are noop and returns meaningless value.
 */
var HelptextAdapter = (function () {
    function HelptextAdapter() {
    }
    HelptextAdapter.prototype.addClassToHelptext = function (_className) { };
    HelptextAdapter.prototype.removeClassFromHelptext = function (_className) { };
    HelptextAdapter.prototype.helptextHasClass = function (_className) {
        return false;
    };
    HelptextAdapter.prototype.setHelptextAttr = function (_name, _value) { };
    HelptextAdapter.prototype.removeHelptextAttr = function (_name) { };
    return HelptextAdapter;
}());
exports.HelptextAdapter = HelptextAdapter;
/**
 * Composite adapter for MDCRadioFoundation
 */
var FoundationAdapter = (function () {
    function FoundationAdapter() {
        this.containerAdapter = new ContainerAdapter();
        this.inputAdapter = new InputAdapter();
        this.labelAdapter = new LabelAdapter();
        this.helptextAdapter = new HelptextAdapter();
    }
    FoundationAdapter.prototype.setContainerAdapter = function (containerAdapter) {
        this.containerAdapter = containerAdapter;
    };
    FoundationAdapter.prototype.setInputAdapter = function (inputAdapter) {
        this.inputAdapter = inputAdapter;
    };
    FoundationAdapter.prototype.setLabelAdapter = function (labelAdapter) {
        this.labelAdapter = labelAdapter;
    };
    FoundationAdapter.prototype.setHelptextAdapter = function (helptextAdapter) {
        this.helptextAdapter = helptextAdapter;
    };
    /* Container */
    FoundationAdapter.prototype.addClass = function (className) {
        this.containerAdapter.addClass(className);
    };
    FoundationAdapter.prototype.removeClass = function (className) {
        this.containerAdapter.removeClass(className);
    };
    /* Label */
    FoundationAdapter.prototype.addClassToLabel = function (className) {
        this.labelAdapter.addClassToLabel(className);
    };
    FoundationAdapter.prototype.removeClassFromLabel = function (className) {
        this.labelAdapter.removeClassFromLabel(className);
    };
    /* Helptext */
    FoundationAdapter.prototype.addClassToHelptext = function (className) {
        this.helptextAdapter.addClassToHelptext(className);
    };
    FoundationAdapter.prototype.removeClassFromHelptext = function (className) {
        this.helptextAdapter.removeClassFromHelptext(className);
    };
    FoundationAdapter.prototype.helptextHasClass = function (className) {
        return this.helptextAdapter.helptextHasClass(className);
    };
    FoundationAdapter.prototype.setHelptextAttr = function (name, value) {
        this.helptextAdapter.setHelptextAttr(name, value);
    };
    FoundationAdapter.prototype.removeHelptextAttr = function (name) {
        this.helptextAdapter.removeHelptextAttr(name);
    };
    /* Input */
    FoundationAdapter.prototype.registerInputFocusHandler = function (handler) {
        this.inputAdapter.registerInputFocusHandler(handler);
    };
    FoundationAdapter.prototype.deregisterInputFocusHandler = function (handler) {
        this.inputAdapter.deregisterInputFocusHandler(handler);
    };
    FoundationAdapter.prototype.registerInputBlurHandler = function (handler) {
        this.inputAdapter.registerInputBlurHandler(handler);
    };
    FoundationAdapter.prototype.deregisterInputBlurHandler = function (handler) {
        this.inputAdapter.deregisterInputBlurHandler(handler);
    };
    FoundationAdapter.prototype.registerInputInputHandler = function (handler) {
        this.inputAdapter.registerInputInputHandler(handler);
    };
    FoundationAdapter.prototype.deregisterInputInputHandler = function (handler) {
        this.inputAdapter.deregisterInputInputHandler(handler);
    };
    FoundationAdapter.prototype.registerInputKeydownHandler = function (handler) {
        this.inputAdapter.registerInputKeydownHandler(handler);
    };
    FoundationAdapter.prototype.deregisterInputKeydownHandler = function (handler) {
        this.inputAdapter.deregisterInputKeydownHandler(handler);
    };
    FoundationAdapter.prototype.getNativeInput = function () {
        return this.inputAdapter.getNativeInput();
    };
    /**
     * MDCFoundation accepts only object as adapter
     * So we create object-proxy of instance.
     */
    FoundationAdapter.prototype.toObject = function () {
        var _this = this;
        var keys = Object.getOwnPropertyNames(Object.getPrototypeOf(this));
        var object = {};
        keys.forEach(function (key) {
            object[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this[key].apply(_this, args);
            };
        });
        return object;
    };
    return FoundationAdapter;
}());
exports.FoundationAdapter = FoundationAdapter;
//# sourceMappingURL=adapter.js.map