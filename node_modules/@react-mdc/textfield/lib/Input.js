"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var immutable_1 = require("immutable");
var PropTypes = require("prop-types");
var base_1 = require("@react-mdc/base");
var adapter_1 = require("./adapter");
var constants_1 = require("./constants");
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME + "__input";
/**
 * Textfield input component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            foundationEventListeners: immutable_1.Map(),
        };
        return _this;
    }
    Meta.prototype.componentDidMount = function () {
        this.context.adapter.setInputAdapter(new InputAdapterImpl(this));
    };
    Meta.prototype.componentWillUnmount = function () {
        this.context.adapter.setInputAdapter(new adapter_1.InputAdapter());
    };
    Meta.prototype.renderNativeDOMProps = function () {
        return {
            eventListeners: this.state.foundationEventListeners.toJS(),
        };
    };
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.contextTypes = {
        adapter: PropTypes.instanceOf(adapter_1.FoundationAdapter).isRequired,
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var InputAdapterImpl = (function (_super) {
    __extends(InputAdapterImpl, _super);
    function InputAdapterImpl(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
    }
    InputAdapterImpl.prototype.registerInputFocusHandler = function (handler) {
        this.registerInputHandler("focus", handler);
    };
    InputAdapterImpl.prototype.deregisterInputFocusHandler = function (handler) {
        this.deregisterInputHandler("focus", handler);
    };
    InputAdapterImpl.prototype.registerInputBlurHandler = function (handler) {
        this.registerInputHandler("blur", handler);
    };
    InputAdapterImpl.prototype.deregisterInputBlurHandler = function (handler) {
        this.deregisterInputHandler("blur", handler);
    };
    InputAdapterImpl.prototype.registerInputInputHandler = function (handler) {
        this.registerInputHandler("input", handler);
    };
    InputAdapterImpl.prototype.deregisterInputInputHandler = function (handler) {
        this.deregisterInputHandler("input", handler);
    };
    InputAdapterImpl.prototype.registerInputKeydownHandler = function (handler) {
        this.registerInputHandler("keydown", handler);
    };
    InputAdapterImpl.prototype.deregisterInputKeydownHandler = function (handler) {
        this.deregisterInputHandler("keydown", handler);
    };
    InputAdapterImpl.prototype.getNativeInput = function () {
        return ReactDOM.findDOMNode(this.element);
    };
    InputAdapterImpl.prototype.registerInputHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.add(handler); }),
        }); });
    };
    InputAdapterImpl.prototype.deregisterInputHandler = function (evt, handler) {
        this.element.setState(function (state) { return ({
            foundationEventListeners: state.foundationEventListeners.update(evt, immutable_1.OrderedSet(), function (x) { return x.delete(handler); }),
        }); });
    };
    return InputAdapterImpl;
}(adapter_1.InputAdapter));
// Input with type="checkbox" as default
function TextInput(props) {
    return (React.createElement("input", __assign({ type: "text" }, props)));
}
var Input = (function (_super) {
    __extends(Input, _super);
    function Input() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Input.prototype.getMetaComponent = function () {
        return Meta;
    };
    Input.prototype.getMetaPropNames = function () {
        return [
            "className",
        ];
    };
    Input.prototype.getChildComponent = function () {
        return TextInput;
    };
    Input.Meta = Meta;
    return Input;
}(base_1.DefaultComponentBase));
exports.default = Input;
//# sourceMappingURL=Input.js.map