"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var base_1 = require("@react-mdc/base");
var constants_1 = require("./constants");
exports.CLASS_NAME = constants_1.BASE_CLASS_NAME + "-divider";
exports.propertyClassNames = {
    INSET: exports.CLASS_NAME + "--inset",
};
/**
 * List divider component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.prototype.renderClassValues = function () {
        return [(_a = {},
                _a[exports.propertyClassNames.INSET] = this.props.inset,
                _a)];
        var _a;
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
// li with role="separator" as default
function SeparatorLi(props) {
    return React.createElement("li", __assign({ role: "separator" }, props));
}
var Divider = (function (_super) {
    __extends(Divider, _super);
    function Divider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Divider.prototype.getMetaComponent = function () {
        return Meta;
    };
    Divider.prototype.getMetaPropNames = function () {
        return [
            "className",
            "inset",
        ];
    };
    Divider.prototype.getChildComponent = function () {
        return SeparatorLi;
    };
    Divider.Meta = Meta;
    return Divider;
}(base_1.DefaultComponentBase));
exports.default = Divider;
//# sourceMappingURL=Divider.js.map