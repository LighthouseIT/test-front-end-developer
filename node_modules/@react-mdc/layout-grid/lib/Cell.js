"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("@react-mdc/base");
var constants_1 = require("./constants");
var utils = require("./utils");
exports.CLASS_NAME = constants_1.CELL_BASE_CLASS_NAME;
/**
 * Grid cell component
 */
var Meta = (function (_super) {
    __extends(Meta, _super);
    function Meta() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Meta.prototype.renderBaseClassName = function () {
        return exports.CLASS_NAME;
    };
    Meta.prototype.renderClassValues = function () {
        var _a = this.props, span = _a.span, spanDesktop = _a.spanDesktop, spanTablet = _a.spanTablet, spanPhone = _a.spanPhone, order = _a.order, align = _a.align;
        var classes = [];
        if (span != null) {
            classes.push(utils.classNameForCellSpan(span));
        }
        if (spanDesktop != null) {
            classes.push(utils.classNameForCellSpan(spanDesktop, "desktop"));
        }
        if (spanTablet != null) {
            classes.push(utils.classNameForCellSpan(spanTablet, "tablet"));
        }
        if (spanPhone != null) {
            classes.push(utils.classNameForCellSpan(spanPhone, "phone"));
        }
        if (align != null) {
            classes.push(utils.classNameForCellAlignment(align));
        }
        if (order != null) {
            classes.push(utils.classNameForCellOrder(order));
        }
        return classes;
    };
    return Meta;
}(base_1.ClassNameMetaBase));
exports.Meta = Meta;
var Cell = (function (_super) {
    __extends(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Cell.prototype.getMetaComponent = function () {
        return Meta;
    };
    Cell.prototype.getMetaPropNames = function () {
        return [
            "className",
            "span",
            "spanDesktop",
            "spanTablet",
            "spanPhone",
            "order",
            "align",
        ];
    };
    Cell.prototype.getChildComponent = function () {
        return "div";
    };
    Cell.Meta = Meta;
    return Cell;
}(base_1.DefaultComponentBase));
exports.default = Cell;
//# sourceMappingURL=Cell.js.map